#ifndef ALIEN_MCGIMPL_MCGINTERNAL_H
#define ALIEN_MCGIMPL_MCGINTERNAL_H
/* Author : havep at Fri Jun  6 17:56:23 2008
 * Generated by createNew
 */

//! Internal struct for MCG implementation
/*! Separate data from header; 
 *  can be only included by LinearSystem and LinearSolver
 */
#include <alien/Kernels/MCG/MCGPrecomp.h>

/*---------------------------------------------------------------------------*/

BEGIN_MCGINTERNAL_NAMESPACE

/*---------------------------------------------------------------------------*/

 //! Check parallel feature for MCG
inline void checkParallel(bool)
{
  // This behaviour may be changed when Parallel MCG will be plugged

}


template<int N>
struct CSRStruct
{

  typedef GPUSolver::MatrixStruct          MatrixStruct ;
  typedef BCSR::BCSRMatrix<double,N>           MatrixBN ;
  typedef typename MatrixBN::Block2DType   MatrixBNValue ;
  typedef double                           VectorBNValue ;
  typedef BCSR::BCSRMatrix<double,1,double,N>  MatrixB1xN;
  typedef typename MatrixB1xN::Block2DType MatrixB1xNValue;

  CSRStruct()
  : m_values(NULL)
  , m_matrix(NULL)
  , m_cmatrix2matrix(NULL)
  , m_matrix2cmatrix(NULL)
  {}

  virtual ~CSRStruct() {
    delete m_matrix ;
    delete m_cmatrix2matrix ;
    delete m_matrix2cmatrix ;
  }

  void init(MatrixStruct* matrix_struct,Real const* values) {
    m_values = (MatrixBNValue*) values ;
    m_matrix = new MatrixBN(matrix_struct,m_values) ;
  }

  void initExtraEqRow(MatrixStruct* matrix_struct,Real const* values) {
    m_cmatrix2matrix = new MatrixB1xN(matrix_struct,(MatrixB1xNValue*)values) ;
  }

  void initExtraEqCol(MatrixStruct* matrix_struct,Real const* values) {
    m_matrix2cmatrix = new MatrixB1xN(matrix_struct,(MatrixB1xNValue*)values) ;
  }

  MatrixBNValue*      m_values ;
  MatrixBN*           m_matrix;
  MatrixB1xN*         m_cmatrix2matrix;
  MatrixB1xN*         m_matrix2cmatrix;
};

/*---------------------------------------------------------------------------*/

class MatrixInternal
{
public :
  typedef GPUSolver::MatrixStruct  MatrixStruct ;
  typedef BCSR::BCSRMatrix<double,1>   MatrixB1 ;
  typedef MatrixB1::Block2DType    MatrixB1Value ;


  MatrixStruct*       m_struct ;
  MatrixStruct*       m_extra_block11_struct ;
  MatrixStruct*       m_extra_block01_struct ;

  MatrixB1*    m_cmatrix ;
  CSRStruct<1> m_csr_b1 ;
  CSRStruct<2> m_csr_b2 ;
  CSRStruct<3> m_csr_b3 ;
  CSRStruct<4> m_csr_b4 ;


  Integer             m_equations_num ;

  MatrixInternal()
  : m_struct(NULL)
  , m_extra_block11_struct(NULL)
  , m_extra_block01_struct(NULL)
  , m_cmatrix(NULL)
  {}

  ~MatrixInternal()
  {
      delete m_struct;
      delete m_extra_block11_struct;
      delete m_extra_block01_struct;
      delete m_cmatrix ;
   }

  template<int N>
  CSRStruct<N>& getCSRStruct() ;

  template<int N>
  CSRStruct<N> const& getCSRStruct() const;

};


/*---------------------------------------------------------------------------*/

class VectorInternal
{
public :
  VectorInternal(int nrow)
  : m_internal(nrow,true)
  , m_extra_eq_internal(0)
  {
    ;
  }

  void init(int nrow,
            double* values)
  {
    m_internal.init(nrow,values) ;
  }

  void initExtraEq(int nrow,
                   double* values)
  {
    m_extra_eq_internal.init(nrow,values) ;
  }



  Alien::GPUInternal::Vector m_internal ;

  Alien::GPUInternal::Vector m_extra_eq_internal ;

};

/*---------------------------------------------------------------------------*/

END_MCGINTERNAL_NAMESPACE

/*---------------------------------------------------------------------------*/
#endif /* ALIEN_MCGIMPL_MCGINTERNAL_H */
