#ifndef ALIEN_MCGIMPL_MCGINTERNAL_H
#define ALIEN_MCGIMPL_MCGINTERNAL_H
/* Author : havep at Fri Jun  6 17:56:23 2008
 * Generated by createNew
 */

//! Internal struct for MCG implementation
/*! Separate data from header; 
 *  can be only included by LinearSystem and LinearSolver
 */
#include <alien/kernels/mcg/MCGPrecomp.h>
#include <MCGS.h>
/*---------------------------------------------------------------------------*/

BEGIN_MCGINTERNAL_NAMESPACE

/*---------------------------------------------------------------------------*/

 //! Check parallel feature for MCG
inline void checkParallel(bool)
{
  // This behaviour may be changed when Parallel MCG will be plugged

}

/*---------------------------------------------------------------------------*/

class MatrixInternal
{
public :
  typedef MCGSolver::CSRProfile ProfileType;
  typedef MCGSolver::BCSRMatrix<double> MatrixType;

  //MatrixType *m_matrix = nullptr;
  MatrixType* m_matrix[2][2] = {{nullptr,nullptr},{nullptr,nullptr}};

  MatrixInternal()
  {}

  ~MatrixInternal()
  {
    delete m_matrix[0][0];
    delete m_matrix[0][1];
    delete m_matrix[1][0];
    delete m_matrix[1][1];
  }
};


/*---------------------------------------------------------------------------*/

class VectorInternal
{
public :
  VectorInternal(int nrow,int block_size)
  : m_bvector(nrow,block_size)
  {

  }

  MCGSolver::BVector<double> m_bvector;
};

/*---------------------------------------------------------------------------*/

class CompositeVectorInternal
{
public:
  CompositeVectorInternal(const std::vector<std::pair<int,int>>& composite_info)
  {
    m_bvector.reserve(composite_info.size());

    for(const auto &p : composite_info)
    {
      m_bvector.emplace_back(p.first,p.second);
    }
  }

  std::vector<MCGSolver::BVector<double>> m_bvector;
};

/*---------------------------------------------------------------------------*/

END_MCGINTERNAL_NAMESPACE

/*---------------------------------------------------------------------------*/
#endif /* ALIEN_MCGIMPL_MCGINTERNAL_H */
