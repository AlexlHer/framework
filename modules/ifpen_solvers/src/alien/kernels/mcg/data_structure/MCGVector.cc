#include "mpi.h"
#include "MCGVector.h"
/* Author : mesriy at Tue Jul 24 15:28:21 2012
 * Generated by createNew
 */

#include <alien/kernels/mcg/linear_solver/GPUInternal.h>
#include <alien/kernels/mcg/MCGBackEnd.h>
#include <alien/kernels/mcg/data_structure/MCGInternal.h>
/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/
MCGVector::MCGVector(const MultiVectorImpl* multi_impl)
: IVectorImpl(multi_impl, AlgebraTraits<BackEnd::tag::mcgsolver>::name())
, m_internal(NULL)
{
  ;
}

/*---------------------------------------------------------------------------*/

MCGVector::
~MCGVector()
{
  delete m_internal ;
}

/*---------------------------------------------------------------------------*/

void 
MCGVector::
init(const VectorDistribution & dist,
     const bool need_allocate)
{ 
  if (need_allocate) allocate();
}

/*---------------------------------------------------------------------------*/

void
MCGVector::
allocate()
{
  delete m_internal ;
  //const VectorDistribution& dist = this->distribution();
  //m_internal = new VectorInternal(dist.globalSize());
  m_internal = new VectorInternal(this->scalarizedGlobalSize());
}

/*---------------------------------------------------------------------------*/

void
MCGVector::
setValues(int nrow,
          const double * values)
{
  m_internal = new VectorInternal(nrow) ;
  m_internal->init(nrow,(double*)values) ;
}

void
MCGVector::
setExtraEqValues(int nrow,
                 const double * values)
{
  m_internal->initExtraEq(nrow,(double*)values) ;
}


/*---------------------------------------------------------------------------*/
void
MCGVector::
getValues(const int nrow, double * values) const
{
  for (int i= 0; i < nrow; i++)
    values[i] = m_internal->m_internal.m_values[i] ;
}


/*---------------------------------------------------------------------------*/

void 
MCGVector::
update(const MCGVector & v)
{
  MCGInternal::checkParallel(this->distribution().isParallel());
  ALIEN_ASSERT((this == &v),("Unexpected error"));
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // namespace Alien

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
