#ifndef ALIEN_GPUINTERNAL_H
#define ALIEN_GPUINTERNAL_H
/* Author : havep at Fri Jun  6 17:56:23 2008
 * Generated by createNew
 */

//! Internal struct for GPU implementation
/*! Separate data from header; 
 *  can be only included by LinearSystem and LinearSolver
 */

#include <cassert>
#include <cmath>

#include "MCGS.h"

namespace Alien {
class GPUInternal
{
 public:
  GPUInternal()
  : m_struct(NULL)
  , m_values(NULL)
  , m_matrix(NULL)
  , m_values_b2(NULL)
  , m_matrix_b2(NULL)
  , m_values_b3(NULL)
  , m_matrix_b3(NULL)
  , m_values_b4(NULL)
  , m_matrix_b4(NULL)
  , m_x(NULL)
  , m_rhs(NULL)
  , m_equations_num(0)
  , m_is_allocated(false)
  {}

  virtual ~GPUInternal() {}

  typedef GPUSolver::MatrixStruct                MatrixStruct ;

  typedef GPUSolver::CSRType<1>::MatrixBN        Matrix;
  typedef GPUSolver::CSRType<1>::MatrixBNValue   MatrixValue ;

  typedef GPUSolver::CSRType<2>::MatrixBN        MatrixB2;
  typedef GPUSolver::CSRType<2>::MatrixBNValue   MatrixB2Value ;

  typedef GPUSolver::CSRType<3>::MatrixBN        MatrixB3;
  typedef GPUSolver::CSRType<3>::MatrixBNValue   MatrixB3Value ;

  typedef GPUSolver::CSRType<4>::MatrixBN        MatrixB4;
  typedef GPUSolver::CSRType<4>::MatrixBNValue   MatrixB4Value ;

  typedef GPUSolver::Vector        Vector;

  MatrixStruct*       m_struct ;

  MatrixValue*        m_values ;
  Matrix*             m_matrix;

  MatrixB2Value*      m_values_b2 ;
  MatrixB2*           m_matrix_b2;

  MatrixB3Value*      m_values_b3 ;
  MatrixB3*           m_matrix_b3;

  MatrixB4Value*      m_values_b4 ;
  MatrixB4*           m_matrix_b4;

  Vector*             m_x ;
  Vector*             m_rhs ;
  Integer             m_equations_num ;

  bool                m_is_allocated ;
};
} // namespace Alien

#endif /* ARCGEOSIM_NUMERICS_LINEARSOLVER_HYPRESOLVERIMPL_HYPREINTERNAL_H */
