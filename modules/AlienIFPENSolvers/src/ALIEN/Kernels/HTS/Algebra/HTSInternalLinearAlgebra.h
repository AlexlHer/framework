// -*- C++ -*-
#ifndef ALIEN_KERNELS_HTS_ALGEBRA_HTSINTERNALLINEARALGEBRA_H
#define ALIEN_KERNELS_HTS_ALGEBRA_HTSINTERNALLINEARALGEBRA_H
/* Author : mesriy at Tue Jul 24 15:56:45 2012
 * Generated by createNew
 */

#include <ALIEN/Utils/Precomp.h>

#include <ALIEN/Kernels/HTS/HTSBackEnd.h>
#include <ALIEN/Core/Backend/IInternalLinearAlgebraT.h>

#include <ALIEN/Expression/Solver/ILinearAlgebra.h>
#include <ALIEN/Kernels/SimpleCSR/Algebra/SimpleCSRInternalLinearAlgebra.h>
#include <ALIEN/Alien-IFPENSolversPrecomp.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

typedef SimpleCSRInternalLinearAlgebra HTSSolverInternalLinearAlgebra;

typedef AlgebraTraits<BackEnd::tag::hts>::matrix_type HTSCSRMatrix;
typedef AlgebraTraits<BackEnd::tag::simplecsr>::vector_type CSRVector;

class ALIEN_IFPENSOLVERS_EXPORT HTSInternalLinearAlgebra
  : public IInternalLinearAlgebra<HTSCSRMatrix, CSRVector>
{
 public:
  HTSInternalLinearAlgebra();
  virtual ~HTSInternalLinearAlgebra();

  // IInternalLinearAlgebra interface.
  Arccore::Real norm0(const Vector& x) const;
  Arccore::Real norm1(const Vector& x) const;
  Arccore::Real norm2(const Vector& x) const;
  void mult(const Matrix& a, const Vector& x, Vector& r) const;
  void axpy(const Arccore::Real& alpha, const Vector& x, Vector& r) const;
  void aypx(const Arccore::Real& alpha, Vector& y, const Vector& x) const;
  void copy(const Vector& x, Vector& r) const;
  Arccore::Real dot(const Vector& x, const Vector& y) const;
  void scal(const Arccore::Real& alpha, Vector& x) const;
  void diagonal(const Matrix& a, Vector& x) const;
  void reciprocal(Vector& x) const;
  void pointwiseMult(const Vector& x, const Vector& y, Vector& w) const;

  void mult(const Matrix& a, const UniqueArray<Real>& x, UniqueArray<Real>& r) const ;
  void axpy(const Real & alpha, const UniqueArray<Real>& x, UniqueArray<Real>& r) const;
  void aypx(const Real & alpha, UniqueArray<Real>& y, const UniqueArray<Real>& x) const;
  void copy(const UniqueArray<Real>& x, UniqueArray<Real>& r) const;
  Real dot(Integer local_size, const UniqueArray<Real>& x, const UniqueArray<Real>& y) const;
  void scal(const Real & alpha, UniqueArray<Real>& x) const;

};


/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

} // namespace Alien

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#endif /* ALIEN_HTSIMPL_HTSLINEARALGEBRA_H */
