// -*- C++ -*-
#ifndef ALIEN_IFPSOLVERIMPL_IFPMATRIX_H
#define ALIEN_IFPSOLVERIMPL_IFPMATRIX_H
/* Author : havep at Fri Jul 20 13:16:25 2012
 * Generated by createNew
 */

#include <ALIEN/Kernels/IFP/IFPSolverPrecomp.h>
#include <ALIEN/Core/Impl/IMatrixImpl.h>
#include <ALIEN/Data/Space.h>
#include <ALIEN/Alien-IFPENSolversPrecomp.h>

/*---------------------------------------------------------------------------*/

BEGIN_IFPSOLVERINTENRAL_NAMESPACE

class MatrixInternal;

END_IFPSOLVERINTERNAL_NAMESPACE

/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/

class MultiMatrixImpl;

/*---------------------------------------------------------------------------*/

class ALIEN_IFPENSOLVERS_EXPORT IFPMatrix : public IMatrixImpl
{
 public:
  typedef IFPSolverInternal::MatrixInternal MatrixInternal;

public :
  IFPMatrix(const MultiMatrixImpl * multi_impl);
  virtual ~IFPMatrix() ;

public:

  void initSpace0(const Space & space)
  {
    m_space0 = &space ;
  }

  void initSpace1(const Space & space)
  {
    m_space1 = &space ;
  }

  const ISpace & space() const {
    if(m_space0)
      return *m_space0 ;
    else
      return IMatrixImpl::rowSpace() ;
  }

  const Space & space0() const {
    return *m_space0 ;
  }

  const Space & space1() const {
    return *m_space1 ;
  }


  void free() {
    freeGraphData() ;
  }

  void clear() {
    freeData() ;
  }

  bool isGraphInitialized() const {
    return m_graph_initialized ;
  }

  void setSumFirstEq(bool flag) {
    m_sum_first_eq = flag?1:0 ;
  }

public:
  bool
  initMatrix(Arccore::Integer links_num,          // num of links
             Arccore::Integer global_nodes_num,   // global num of nodes
             Arccore::Integer nodes_num,          // num of nodes [includes ghost nodes]
             Arccore::Integer local_nodes_num,    // num of nodes in linear system [without ghost nodes]
             Arccore::Integer max_node_id,        // max node id
             Arccore::Integer equations_num,      // num of equations by link
             Arccore::Integer unknowns_num,       // num of unknowns by link
             Arccore::Integer* nodeList,          // list of nodes as local Arcane num [size=nodes_num]
             Arccore::Integer* globalNodeList,    // list of nodes as global Arcane num [size=nodes_num]
             Arccore::Integer* nodeToLocalRow,
             Arccore::Integer* rowUidList,
             Arccore::Integer* i_node,            // list of nodes i of links (ij) [local index; size=links_num]
             Arccore::Integer* global_i_node,     // idem but global index
             Arccore::Integer* j_node,            // list of nodes i of links (ij)
             Arccore::Integer* global_j_node      // idem but global index
            );

  bool
  initMatrix(Arccore::Integer links_num,          //num of links
             Arccore::Integer global_nodes_num,   //global num of nodes
             Arccore::Integer nodes_num,          //num of nodes [includes ghost nodes]
             Arccore::Integer local_nodes_num,    //num of nodes in linear system [without ghost nodes]
             Arccore::Integer max_node_id,        // max node id
             Arccore::Integer equations_num,      //num of equations by link
             Arccore::Integer unknowns_num,       //num of unknowns by link
             Arccore::Integer* nodeList,          //list of nodes as local Arcane num [size=nodes_num]
             Arccore::Integer* globalNodeList,    //list of nodes as global Arcane num [size=nodes_num]
             Arccore::Integer* nodeToLocalRow,
             Arccore::Integer* rowUidList,
             Arccore::Integer* i_node,            //list of nodes i of links (ij) [local index; size=links_num]
             Arccore::Integer* global_i_node,     //    idem but global index
             Arccore::Integer* j_node,            //list of nodes i of links (ij)
             Arccore::Integer* global_j_node,     //idem but global index
             Arccore::Integer* ass_elem_node_ptr, //List of offset of Associated element List
             Arccore::Integer* ass_elem_node,     //List of Associated elements of links
             Arccore::Integer* global_ass_elem_node, //idem with global index
             Arccore::Integer extra_eq_num,            // num of well equations
             Arccore::Integer global_extra_eq_num,     // global num of well equations
             Arccore::Integer* extra_eq_ids,           // well equation ids
             Arccore::Integer* extra_eq_elem_node_ptr, // perf node offset
             Arccore::Integer* extra_eq_elem_node      // perf node ids
             ) ;
  bool initMatrix(int equations_num,
                  int unknowns_num,
                  int global_nodes_num,
                  int nodes_num,
                  int row_offset,
                  Arccore::ConstArrayView<Arccore::Integer> columnIndexesPtr,
                  Arccore::ConstArrayView<Arccore::Integer> columnIndexes,
                  Arccore::Int64 timestamp) ;

  //version BlockTailleVariable
  bool
  initMatrix(Arccore::Integer links_num,          //num of links
             Arccore::Integer global_nodes_num,   //global num of nodes
             Arccore::Integer nodes_num,          //num of nodes [includes ghost nodes]
             Arccore::Integer local_nodes_num,    //num of nodes in linear system [without ghost nodes]
             Arccore::Integer max_node_id,        // max node id
             Arccore::Integer equations_num,      //num of equations by link
             Arccore::Integer unknowns_num,       //num of unknowns by link
             Arccore::Integer* unknowns_num_per_cell, // num of unknowns per cell
             Arccore::Integer* nodeList,          //list of nodes as local Arcane num [size=nodes_num]
             Arccore::Integer* globalNodeList,    //list of nodes as global Arcane num [size=nodes_num]
             Arccore::Integer* nodeToLocalRow,
             Arccore::Integer* i_node,            //list of nodes i of links (ij) [local index; size=links_num]
             Arccore::Integer* global_i_node,     //    idem but global index
             Arccore::Integer* j_node,            //list of nodes i of links (ij)
             Arccore::Integer* global_j_node,     //idem but global index
             Arccore::Integer* ass_elem_node_ptr, //List of offset of Associated element List
             Arccore::Integer* ass_elem_node,     //List of Associated elements of links
             Arccore::Integer* global_ass_elem_node, //idem with global index
             Arccore::Integer extra_eq_num,
             Arccore::Integer global_extra_eq_num,
             Arccore::Integer* extra_eq_ids,
             Arccore::Integer* extra_eq_elem_node_ptr,
             Arccore::Integer* extra_eq_elem_node,
             Arccore::Integer* extra_eq_elem_node_lid
             );

  /*
  void initWellMatrix(Arccore::Integer extra_eq_num,
                      Arccore::Integer global_extra_eq_num,
                      Arccore::Integer* extra_eq_ids,
                      Arccore::Integer* extra_eq_elem_node_ptr,
                      Arccore::Integer* extra_eq_elem_node,
                      Arccore::Integer* extra_eq_elem_lid) ;

  bool initSubMatrix01(int nrow,
                       int global_nb_extra_eq,
                       int nb_extra_eq,
                       int const* row_offset,
                       int const* cols) ;

  bool initSubMatrix11(int nb_extra_eq,
                       int const* row_offset,
                       int const* cols) ;
  */

  bool allocate() ;

  bool allocate(Arccore::ArrayView<Arccore::Integer> coupled_ids) ;

  bool allocateRS(Arccore::ArrayView<Arccore::Integer> coupled_ids) ;

  bool setMatrixValues(const double * values) ;

  bool setMatrixBlockValues(const double * values) ;

  bool setMatrixValues( Arccore::Real* dFijdXi,
                        Arccore::Real* dCidXi,
                        Arccore::Integer* nodeList,
                        Arccore::Integer* nodeToLocalRow,
                        Arccore::Integer* i_node,
                        Arccore::Integer* j_node) ;

  bool setMatrixValues( Arccore::Real* dFijdXi,
                        Arccore::Real* dCidXi,
                        Arccore::Integer* nodeList,
                        Arccore::Integer* nodeToLocalRow,
                        Arccore::Integer* i_node,
                        Arccore::Integer* j_node,
                        Arccore::Integer* ass_elem_node_ptr) ;

  bool setMatrixValues( Arccore::Real* dFijdXi,
                        Arccore::Real* MatFracFij,
                        Arccore::Real* dCidXi,
                        Arccore::Integer* nodeList,
                        Arccore::Integer* nodeToLocalRow,
                        Arccore::Integer* i_node,
                        Arccore::Integer* j_node,
                        Arccore::Integer* ass_elem_node_ptr,
                        Arccore::Integer NumOfLink1,
                        Arccore::Integer NumOfLink2) ;

 //A. Anciaux pour BlockTailleVariable
  bool setMatrixRsValues(Arccore::Real* dFijdXi,
                         Arccore::Real* dCidXi,
                         Arccore::Integer* nodeList,
                         Arccore::Integer* nodeToLocalRow,
                         Arccore::Integer* i_node,
                         Arccore::Integer* j_node);

  bool setMatrixExtraValues( Arccore::Real* ExtraRowValues,
                             Arccore::Real* ExtraColValues,
                             Arccore::Real* ExtraDiagValues) ;

  //A. Anciaux pour BlockTailleVariable
  bool setMatrixRsExtraValues(Arccore::Real* ExtraRowValues,
                              Arccore::Real* ExtraColValues,
                              Arccore::Real* ExtraDiagValues);

  bool setInitValues(int nrows, const int* rows, double * values) ;

  bool initSubMatrix11Values( Arccore::Real const* ExtraDiagValues) ;

  bool initSubMatrix10Values( Arccore::Real const* ExtraRowValues) ;

  bool initSubMatrix01Values( Arccore::Real const* ExtraColValues) ;

  bool setSymmetricProfile(bool value);

  bool getSymmetricProfile() const;


public:
  MatrixInternal * internal() { return m_internal; }
  const MatrixInternal * internal() const{ return m_internal; }

private :
  //! Ensemble des tags pour la construction CprAMG
  bool computeEllipticSplitTags(Arccore::UniqueArray<Arccore::Integer> & split_tags,int equation_num) const;

  Arccore::Integer ijk(Arccore::Integer i, Arccore::Integer j, Arccore::Integer k, Arccore::Integer block_size, Arccore::Integer unknowns_num) const {
    return k*block_size+i*unknowns_num+j ;
  }

  void freeData();
  void freeGraphData();


private:
  MatrixInternal * m_internal ;
  Arccore::Integer* m_node_list_ref;

  //! conversion from arcane node numbering to graph node numbering (without ghost)
  Arccore::Integer  m_row_offset;

  bool m_graph_initialized ;
  bool m_symmetric_profile;
  Arccore::Integer m_sum_first_eq;

  Space const* m_space0 ;
  Space const* m_space1 ;

};

/*---------------------------------------------------------------------------*/

} // namespace Alien

/*---------------------------------------------------------------------------*/

#endif /* ALIEN_IFPSOLVERIMPL_IFPMATRIX_H */
