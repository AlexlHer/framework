// -*- C++ -*-
/* Author : couletj at Thu Jul 25 09:24:07 2019
 * Generated by createNew
 */

/* INFO: Les services et modules se conforment maintenant � la politique Arcane core.
 *       L'emploi des .h �tait fictif. 
 *       D�sormais les d�clarations de classe pour les modules et services seront
 *       localis�es dans le fichier .cc correspondant.
 */

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#ifndef ALIEN_HPDDMINTERNALSOLVER_H
#define ALIEN_HPDDMINTERNALSOLVER_H
// Interface du service 

#include <ALIEN/Utils/Precomp.h>
#include <ALIEN/Core/Backend/IInternalLinearSolverT.h>
#include <ALIEN/Kernels/HPDDM/LinearSolver/HPDDMOptionTypes.h>
#include <ALIEN/Expression/Solver/SolverStats/SolverStater.h>
#include <ALIEN/Core/Backend/IInternalLinearSolverT.h>
#include <ALIEN/Utils/Trace/ObjectWithTrace.h>
#include <ALIEN/Kernels/SimpleCSR/DataStructure/SimpleCSRVector.h>
#include <ALIEN/Kernels/SimpleCSR/DataStructure/SimpleCSRMatrix.h>
#include <ALIEN/Alien-HPDDMPrecomp.h>

#include <ALIEN/Kernels/HPDDM/LinearSolver/ILinearSolverDDM.h>
#include <ALIEN/Kernels/HPDDM/DataStructure/HPDDMInternal.h>
#include <ALIEN/Kernels/HPDDM/DataStructure/HPDDMVector.h>
#include <ALIEN/Kernels/HPDDM/DataStructure/HPDDMMatrix.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
class IOptionsHPDDMSolver;

namespace Alien {

class SolverStater;

class ALIEN_HPDDM_EXPORT HPDDMInternalSolver
//: public IInternalLinearSolver<SimpleCSRMatrix<Real>, SimpleCSRVector<Real> >
: public ILinearSolverDDM
, public ObjectWithTrace
{
 public:
  typedef SolverStatus Status;

  typedef SimpleCSRMatrix<Arccore::Real>      CSRMatrixType;
  typedef SimpleCSRVector<Arccore::Real>      CSRVectorType;
  typedef SimpleCSRInternal::MatrixInternal<Arccore::Real>  CSRInternalMatrixType;

  
  /** Constructeur de la classe */
  HPDDMInternalSolver(Arccore::MessagePassing::IMessagePassingMng* parallel_mng,
                      IOptionsHPDDMSolver* options) ;
  
  /** Destructeur de la classe */
  virtual ~HPDDMInternalSolver() {}
  
public:
  //! return package back end name
  Arccore::String getBackEndName() const { return "hpddm" ; }
  Arccore::String getName() const { return "hpddm"; }

  void init();
  void init(int argc, char const** argv) ;

  //! Finalize
  void end() ;


  void updateParallelMng(Arccore::MessagePassing::IMessagePassingMng* pm)
  {
    m_parallel_mng = pm;
  }

  //! Indicateur de support de r�solution parall�le
  bool hasParallelSupport() const { return true; }

  //! Compatible linear algebra
  std::shared_ptr<Alien::ILinearAlgebra> algebra() const {
    return std::shared_ptr<Alien::ILinearAlgebra>() ;
  }

  //! Etat du solveur
  const Alien::ILinearSolver::Status & getStatus() const {
    return m_status;
  }

  Alien::SolverStatus& getStatusRef() {
    return m_status ;
  }

  const SolverStat & getSolverStat() const { return m_stater; }
  SolverStater& getSolverStater() { return m_stater; }

  bool solve(const Alien::IMatrix& A,
             const Alien::IVector& b,
             Alien::IVector& x);

  bool solve(const Alien::IMatrix& Ad,
             const Alien::IMatrix& An,
             const Alien::IVector& b,
             Alien::IVector& x);

  bool solve(const CSRMatrixType& A, const CSRVectorType& b, CSRVectorType& x);

  bool solve(const CSRMatrixType& Ad, const CSRMatrixType& An,const CSRVectorType& b, CSRVectorType& x);

  void setNullSpaceConstantOption(bool flag) {}

  void internalPrintInfo() const ;

private:

  void _computeHPDDMRhs(const CSRMatrixType& A, CSRVectorType const& b) ;
  void _computeHPDDMSol(const CSRMatrixType& A, CSRVectorType const& x) ;
  void _computeSol(CSRVectorType& x) ;


  Arccore::MessagePassing::IMessagePassingMng* m_parallel_mng = nullptr;
  IOptionsHPDDMSolver*                         m_options      = nullptr ;

  typedef HPDDMMatrix<Arccore::Real>::MatrixInternal     HPDDMMatrixType ;
  typedef HPDDMMatrixType::HPDDMValueType                HPDDMValueType ;

  HPDDMMatrixType             m_hpddm_matrix ;
  std::vector<Arccore::Real>  m_hpddm_sol ;
  std::vector<Arccore::Real>  m_hpddm_rhs ;

  
  Alien::SolverStater m_stater;  //<! Statistiques d'ex�cution du solveur
  Alien::ILinearSolver::Status m_status;

  Arccore::Integer m_output_level = 0 ;
};

}

#endif

