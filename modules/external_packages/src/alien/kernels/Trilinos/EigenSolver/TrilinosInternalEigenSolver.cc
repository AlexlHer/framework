
/* Author : desrozis at Mon Mar 30 15:06:37 2009
 * Generated by createNew
 */
#define MPICH_SKIP_MPICXX 1
#include "mpi.h"

#include <vector>

#include "alien/Kernels/Trilinos/TrilinosPrecomp.h"
#include <alien/Kernels/Trilinos/DataStructure/TrilinosVector.h>
#include <alien/Kernels/Trilinos/DataStructure/TrilinosMatrix.h>
#include <alien/Kernels/Trilinos/Algebra/TrilinosLinearAlgebra.h>
#include <alien/Kernels/Trilinos/Algebra/TrilinosInternalLinearAlgebra.h>
#include <alien/Kernels/Trilinos/DataStructure/TrilinosInternal.h>

#include <alien/data/Space.h>
#include <alien/expression/solver/IEigenSolver.h>
#include <alien/core/impl/MultiMatrixImpl.h>
#include <alien/core/impl/MultiVectorImpl.h>
#include <alien/Kernels/Trilinos/TrilinosPrecomp.h>
#include <alien/Kernels/Trilinos/EigenSolver/TrilinosInternalEigenSolver.h>
#include <alien/core/backend/EigenSolverT.h>
#include <ALIEN/axl/TrilinosEigenSolver_IOptions.h>


/*---------------------------------------------------------------------------*/

namespace Alien {

/*---------------------------------------------------------------------------*/
TrilinosInternalEigenSolver::TrilinosInternalEigenSolver(
    IParallelMng* parallel_mng, IOptionsTrilinosEigenSolver* options)
: m_parallel_mng(parallel_mng)
, m_options(options)
{}

void
TrilinosInternalEigenSolver::init(int argc, char const** argv)
{
#ifdef ALIEN_USE_TRILINOSSOLVER
  //m_hts_solver.reset(new HartsSolver::HTSSolver()) ;
#endif
}


/*---------------------------------------------------------------------------*/

void
TrilinosInternalEigenSolver::init()
{
  m_output_level = m_options->output();
}


/*---------------------------------------------------------------------------*/






/*---------------------------------------------------------------------------*/



const Alien::IEigenSolver::Status&
TrilinosInternalEigenSolver::
getStatus() const
{
  return m_status;
}




bool
TrilinosInternalEigenSolver::
solve(EigenProblem& p)
{
  using namespace Alien;

#ifdef ALIEN_USE_TRILINOSSOLVER
    //EigenProblemT<BackEnd::tag::simplecsr> true_problem(p) ;
    //return solve(true_problem) ;
#endif
  return false ;
}

bool
TrilinosInternalEigenSolver::
solve(GeneralizedEigenProblem& p)
{
  using namespace Alien;

#ifdef ALIEN_USE_TRILINOSSOLVER
    //EigenProblemT<BackEnd::tag::simplecsr> true_problem(p) ;
    //return solve(true_problem) ;
#endif
  return false ;
}

IEigenSolver*
TrilinosInternalEigenSolverFactory(IParallelMng* p_mng, IOptionsTrilinosEigenSolver* options)
{
  return new TrilinosInternalEigenSolver(p_mng, options);
}
} // namespace Alien
