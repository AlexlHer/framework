// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
/* Author : havep at Tue Apr  7 11:19:04 2009
 * Generated by createNew
 */

#include "Utils/Utils.h"
#include "TimeUtils/ITimeMng.h"
#include "Mesh/Geometry/IGeometryMng.h"
#include "Tests/IServiceValidator.h"

#include "Shpco2Arcane/Shpco2ArcaneModule.h"

#include <arcane/ITimeLoopMng.h>

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

Shpco2ArcaneModule::
Shpco2ArcaneModule(const Arcane::ModuleBuildInfo& mbi)
  : ArcaneShpco2ArcaneObject(mbi)
  , IAppServiceMng()
  , TimeMngBase(mbi.m_sub_domain)
  , m_initialized(false)
  , m_geometry_mng(NULL)
  , m_geometry_policy(NULL)
{
  ;
}

Shpco2ArcaneModule::
~Shpco2ArcaneModule()
{
  ;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

#define ADD_OPTIONAL_SERVICE(SERVICE_NAME,STRING_NAME)                                \
  if( options()->SERVICE_NAME.size() > 0 )                                            \
    addService(dynamic_cast<IService*>( options()->SERVICE_NAME[0] ), STRING_NAME);   \
  else                                                                                \
    addMissingServiceInfo( typeid(options()->SERVICE_NAME[0]).name(), STRING_NAME );  \

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void Shpco2ArcaneModule::initializeAppServiceMng()
{
  if (m_initialized) return ;

  info() << "Shpco2Arcane::initializeAppServiceMng";

    ADD_OPTIONAL_SERVICE(timeMng,"Time Manager");
    ADD_OPTIONAL_SERVICE(geometryService,"Geometry");
    ADD_OPTIONAL_SERVICE(expParser,"Expression Parser");
    ADD_OPTIONAL_SERVICE(expressionMng,"Expression Manager");

    // Set timeLoopMng for improve error message
    setTimeLoopMng(subDomain()->timeLoopMng());

  m_initialized = true;
}

#undef ADD_OPTIONAL_SERVICE

/*---------------------------------------------------------------------------*/

void
Shpco2ArcaneModule::
prepareInit()
{
  initializeAppServiceMng();
  TimeMngBase::setVerbose(false);
//  TimeMngBase::beginTimeStep();

  m_geometry_mng = IAppServiceMng::find<IGeometryMng>(true);
  m_geometry_mng->setPolicyTolerance(true); // Lazy policy :(
  m_geometry_policy = new IGeometryPolicy();

  // Création des groupes (pouvant être utilisés sur les bords)
  for(Integer i=0; i<options()->groupCreator.size(); ++i)
    {
      options()->groupCreator[i]->init();
    }

}

/*---------------------------------------------------------------------------*/
/*Initialisation des calculs proprement dit
 */
void
Shpco2ArcaneModule::
init()
{
  initializeAppServiceMng();
  TimeMngBase::setVerbose(false);
  TimeMngBase::init();

  for(CaseOptionMultiServiceT<IServiceValidator>::iterator iv = options()->validator.begin();
      iv != options()->validator.end(); ++iv) {
    (*iv)->init();
  }

  if (m_geometry_mng)
    {
      // C'est à l'application de gérer la mise
      // à jour de la géométrie
      //
      m_geometry_mng->update(m_geometry_policy);
    }

  // Création des groupes (pouvant être utilisés sur les bords)
  for(Integer i=0; i<options()->groupCreator.size(); ++i)
    {
      options()->groupCreator[i]->apply();
    }
}

/*---------------------------------------------------------------------------*/

void
Shpco2ArcaneModule::
continueInit()
{
  initializeAppServiceMng();
  TimeMngBase::setVerbose(false);
}

/*---------------------------------------------------------------------------*/

void
Shpco2ArcaneModule::
startTimeStep()
{
  ARCANE_ASSERT((m_initialized),("Shpco2Arcane not initialized"));
  TimeMngBase::beginTimeStep();
}

/*---------------------------------------------------------------------------*/

void
Shpco2ArcaneModule::
endTimeStep()
{
  ARCANE_ASSERT((m_initialized),("Shpco2Arcane not initialized"));
  
  if (TimeMngBase::endTimeStep())
    subDomain()->timeLoopMng()->stopComputeLoop(true);
}

/*---------------------------------------------------------------------------*/

void
Shpco2ArcaneModule::
validate()
{
  bool hasError = false;
  const Integer count = options()->validator.size();
  for(Integer i=0;i<count;++i) {
    if (options()->validator[i]->validate() != 0) {
      hasError = true;
      error() << "Shpco2Arcane validator #" << i << " failed";
    }
  }
  if (hasError)
    fatal() << "Shpco2Arcane validation failure : read details above";
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

using namespace Arcane;
ARCANE_REGISTER_MODULE_SHPCO2ARCANE(Shpco2ArcaneModule);
