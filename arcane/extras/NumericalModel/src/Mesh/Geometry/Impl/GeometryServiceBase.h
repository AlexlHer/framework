// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
#ifndef ARCGEOSIM_GEOMETRY_GEOMETRYSERVICEBASE_H
#define ARCGEOSIM_GEOMETRY_GEOMETRYSERVICEBASE_H
/* Author : havep at Thu Apr  3 09:09:09 2008
 * Generated by createNew
 */

#include "Mesh/Geometry/IGeometryMng.h"
#include "Mesh/Geometry/Impl/ItemGroupGeometryProperty.h"

namespace Arcane {
  class ITraceMng;
  class ISubDomain;
}

class GeometryServiceBase 
  : public IGeometryMng
{
public:
  /** Constructeur de la classe */
  GeometryServiceBase();

  /** Destructeur de la classe */
  virtual ~GeometryServiceBase();
  
public:
  //@{ @name Geometric property management for ItemGroup 

  //! Set geometric properties on a ItemGroup
  /*! \deprecated storage must be defined explicitly */  
  void ARCANE_DEPRECATED addItemGroupProperty(ItemGroup group, Integer property);

  //! Set geometric properties on a ItemGroup
  void addItemGroupProperty(ItemGroup group, Integer property, Integer storage);

  //! Set geometric properties on a ItemGroup with an external container (real field)
  void addItemGroupProperty(ItemGroup group, IGeometryProperty::eProperty property, RealVariable var);

  //! Set geometric properties on a ItemGroup with an external container (real3 field)
  void addItemGroupProperty(ItemGroup group, IGeometryProperty::eProperty property, Real3Variable var);

  //! Get set of properties of an ItemGroup
  Integer getItemGroupProperty(ItemGroup group);

  //! Check is a property is activated on an ItemGroup
  bool hasItemGroupProperty(ItemGroup group, Integer property);

  //! Check if a storage is available on an ItemGroup
  Integer getItemGroupPropertyStorage(ItemGroup group, IGeometryProperty::eProperty property);

  //@}

  //@{ @name Access to geometric values

  //! Get geometric property values for a Real field
  const RealVariable & getRealVariableProperty(ItemGroup group, IGeometryProperty::eProperty property);

  //! Get geometric property values for a Real3 field
  const Real3Variable & getReal3VariableProperty(ItemGroup group, IGeometryProperty::eProperty property);

  //! Get geometric property values for a Real field
  const RealGroupMap & getRealGroupMapProperty(ItemGroup group, IGeometryProperty::eProperty property);

  //! Get geometric property values for a Real3 field
  const Real3GroupMap & getReal3GroupMapProperty(ItemGroup group, IGeometryProperty::eProperty property);

  //@}

  //@{ @name global property management 

  //! Update property values for all ItemGroups
  void update(IGeometryPolicy * policy = NULL);

  //! Reset property for all ItemGroups
  void reset();
  
  //@}

  //! Temporary interface to set tolerance on geometry policy
  void setPolicyTolerance(bool tolerance);

protected:
  //@{ Local extension of the interface

  //! Access to traceMng
  virtual ITraceMng * traceMng() = 0;

  //! Access to mesh
  virtual IMesh * mesh() = 0;

  template<typename GeometryT>
  void updateGroup(ItemGroup group,GeometryT & geometry);

  //! Name of instancied class
  virtual const char * className() const = 0;

  //@}

protected:
  //@{ @name property management by group

  //! Update property values for an ItemGroup
  virtual void update(ItemGroup group) = 0;

  //! Reset property for an ItemGroup
  virtual void reset(ItemGroup group) = 0;
  //@}

protected:
  typedef std::map<ItemGroupImpl*, ItemGroupGeometryProperty> PropertyMap;
  PropertyMap m_group_property_map;
  String m_suffix; //!< suffix for internal variable names
  bool m_changed_property; //!< Tracage des changements d'état (addItemGroupProperty si la propritété est déjà défini est aussi un changement d'état)
  enum { eUndef, eLazy, eStrict } m_policy_tolerance;

  //! Return ItemGroupGeometryProperty if requested property and storage are available
  ItemGroupGeometryProperty::StorageInfo & _checkItemGroupProperty(ItemGroupImpl* group,
                                                                   IGeometryProperty::eProperty property,
                                                                   IGeometryProperty::eStorage storage);
  void _resetComputeFlags();
  void _checkItemGroupUsage();
  /*! Using setSuffix allow to define a known extension for internal variable name.
   *  At this level, the user is responsible to the collision management of names */
  void setSuffix(const String & suffix) { m_suffix = suffix; }
};

#include "Mesh/Geometry/Impl/GeometryServiceBaseT.h"

#endif /* ARCGEOSIM_GEOMETRY_GEOMETRYSERVICEBASE_H */
