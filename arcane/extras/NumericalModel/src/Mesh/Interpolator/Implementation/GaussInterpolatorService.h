// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
#ifndef ARCGEOSIM_INTERPOLATOR_INTERPOLATOR_GAUSSINTERPOLATORSERVICE_H
#define ARCGEOSIM_INTERPOLATOR_INTERPOLATOR_GAUSSINTERPOLATORSERVICE_H
/* Author : dipietrd at Thu May 29 14:06:52 2008
 * Generated by createNew
 */
#include <arcane/MeshVariableRef.h>
#include <arcane/VariableTypedef.h>
#include "Mesh/Geometry/IGeometryMng.h"

#include "Mesh/Interpolator/IInterpolator.h"
#include "GaussInterpolator_axl.h"

#include "Appli/IAppServiceMng.h"

using namespace Arcane;

class GaussInterpolatorService : public ArcaneGaussInterpolatorObject
{
 public:
  /**! @name Constructors and destructors
   */
  //@{
  GaussInterpolatorService(const ServiceBuildInfo& sbi) :
    ArcaneGaussInterpolatorObject(sbi) {}
  //@}

  /**! @name Typedefs
   */
  //@{
  //! Source field type
  typedef VariableFaceReal SourceType;
  //! Target field type
  typedef VariableCellReal3 TargetType;
  //@}

  /**! @name Setters and getters
   */
  //@{
  //! Return cell geometrical properties
  inline Integer getCellGeometricProperties() {
    return IGeometryProperty::PCenter | IGeometryProperty::PMeasure;
  }
  //! Reture face geometrical properties
  inline Integer getFaceGeometricProperties() {
    return IGeometryProperty::PCenter | IGeometryProperty::PMeasure | IGeometryProperty::PNormal;
  }
  //! Set source field
  void setSourceField(const MeshVariableRef* source);
  //! Set target field
  void setTargetField(MeshVariableRef* target);
  //@}

  /**! @name Members
   */
  //@{
  //! Initialize the service
  void init();
  //! Prepare the service
  void prepare();
  //! Perform interpolation
  void interpolate();
  //@}

 private:
  IAppServiceMng* m_app_service_mng;
  const SourceType* m_source;
  TargetType* m_target;
};

#endif /* ARCGEOSIM_INTERPOLATOR_INTERPOLATOR_GAUSSINTERPOLATORSERVICE_H */
