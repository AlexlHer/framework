// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
#include "SyntheticServiceValidatorService.h"
/* Author : havep at Tue Apr  7 15:29:24 2009
 * Generated by createNew
 */

#include <arcane/IMesh.h>
#include <arcane/IVariable.h>
#include <arcane/IVariableMng.h>
#include <arcane/datatype/DataTypes.h>
#include <arcane/utils/Limits.h>
#include <arcane/utils/Math.h>
#include <arcane/IParallelMng.h>

#include <arcane/ArcaneTypes.h>
#include <arcane/utils/Collection.h>

using namespace Arcane;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void
SyntheticServiceValidatorService::init()
  {
    if (m_initialized)
      return;
    //! Get validation group and check existence
    m_mesh_group = mesh()->findGroup(options()->groupName());
    if (m_mesh_group.null())
      {
        if (options()->verbose())
          {
            pinfo() << "Available groups are :";
            ItemGroupCollection coll = mesh()->groups();
            for (ItemGroupCollection::Iterator i = coll.begin(); i
                != coll.end(); ++i)
              {
                ItemGroup g = *i;
                pinfo() << "\tGroup : " << g.name() << " size=" << g.size();
              }
          }
        fatal() << "Cannot check on undefined group '"
            << options()->groupName() << "'";
      }
    //! Initialize DataAccessor
    options()->variableField()->init(m_mesh_group);
    m_initialized = true;
  }

/*---------------------------------------------------------------------------*/

int
SyntheticServiceValidatorService::validate()
  {
    if (!m_initialized) fatal() << "Service not initialized";
    
    //! Get checked variable IVariable
    IVariable* ivar = options()->variableField()->variable(m_mesh_group);
    m_mesh_group = m_mesh_group.own();

    //! Construct mesh variable
    ItemVariableScalarRefT<Real> var(ivar);

    Real value;
    switch (options()->reduction())
      {
    case SyntheticServiceValidatorTypes::Min:
      {
        value = +FloatInfo<Real>::maxValue();
        ENUMERATE_ITEM(iitem,m_mesh_group)
        value = math::min(value,var[iitem]);
        value = subDomain()->parallelMng()->reduce(Parallel::ReduceMin, value);
      }
      break;
    case SyntheticServiceValidatorTypes::Max:
      {
        value = -FloatInfo<Real>::maxValue();
        ENUMERATE_ITEM(iitem,m_mesh_group)
        value = math::min(value,var[iitem]);
        value = subDomain()->parallelMng()->reduce(Parallel::ReduceMax, value);
      }
      break;
    case SyntheticServiceValidatorTypes::Mean:
      {
        value = 0;
        ENUMERATE_ITEM(iitem,m_mesh_group)
        value += var[iitem];
        value = subDomain()->parallelMng()->reduce(Parallel::ReduceSum, value);
        const Integer fullSize = subDomain()->parallelMng()->reduce(
            Parallel::ReduceSum, m_mesh_group.size());
        value /= fullSize;
      }
      break;
      }

    const Real reference = options()->referenceValue();
    const Real tolerance = options()->tolerance();

    Real diffError;
    switch (options()->comparator())
      {
    case SyntheticServiceValidatorTypes::Absolute:
      diffError = math::abs(reference - value);
      break;
    case SyntheticServiceValidatorTypes::Relative:
      diffError = math::abs(reference - value) / math::abs(reference);
      break;
      }

    const bool hasError = (diffError > tolerance);
    if (options()->verbose() or hasError)
      {
        pinfo() << "Reduction of variable " << var.name() << " on group "
            << m_mesh_group.name() << " is " << std::fixed << std::setprecision(10)
            << value;
        pinfo() << "Error to reference value " << reference << " is "
            << std::fixed << std::setprecision(10) << diffError;
      }

    if (hasError)
      return 1;
    else
      return 0;
  }

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_REGISTER_SERVICE_SYNTHETICSERVICEVALIDATOR(SyntheticServiceValidator,SyntheticServiceValidatorService);
