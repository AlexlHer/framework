// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
#include "VariableAccessorService.h"
/* Author : desrozis at Wed Dec 17 15:34:42 2008
 * Generated by createNew
 */

#include <arcane/IVariableMng.h>
#include <arcane/IVariableAccessor.h>

using namespace Arcane;

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void
VariableAccessorService::init(const ItemGroup& group)
{
  if (m_initialized)
    return;

  info() << __PRETTY_FUNCTION__;

  // Manager de variables
  IVariableMng * variable_mng = subDomain()->variableMng();

  // Nom de la variable
  String variable_name = options()->name();

  // Recherche de la variable
  m_ivariable = variable_mng->findMeshVariable(mesh(), variable_name);

  if (m_ivariable == NULL)
    {
      fatal() << "Variable '" << variable_name << "' not defined";
    }

  // Verification du type de données => uniquement Real
  if (m_ivariable->dataType() != DT_Real)
    {
      fatal() << "Variable '" << variable_name
          << "' data type not REAL (actually only used)";
    }

  // Verification de la dimension => uniquement 1
  if (m_ivariable->dimension() != 1)
    {
      fatal() << "Variable '" << variable_name
          << "' dimension != 1 (actually only used)";
    }

  m_initialized = true;
  //! Check group compatibility
  if (group.itemKind() != m_ivariable->itemKind())
    {
      fatal() << "Incompatible kind between " << m_ivariable->name()
          << " variable and " << group.name() << " group";
    }
}

/*---------------------------------------------------------------------------*/

IVariable *
VariableAccessorService::variable(const ItemGroup& group)
{
  if (!m_initialized)
    {
      fatal() << "Service not initialized";
    }

  return m_ivariable;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_REGISTER_SERVICE_VARIABLEACCESSOR(VariableAccessor,VariableAccessorService);
