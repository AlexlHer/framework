// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
#ifndef FLUXTERMMNGSERVICE_H
#define FLUXTERMMNGSERVICE_H
/* Author : haeberlf at Wed Aug 27 16:50:27 2008
 * Generated by createNew
 */

#include <arcane/VariableTypes.h>
#include <arcane/VariableTypedef.h>

#include "Mesh/Interpolator/IInterpolator.h"

#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/vector.hpp>
#include <boost/numeric/ublas/vector_proxy.hpp>
#include <boost/numeric/ublas/io.hpp>
#include <boost/shared_ptr.hpp>

#include "Flow/FluxTerm/IFluxTermMng.h"

#include "Mesh/Geometry/IGeometryMng.h"

namespace Arcane { }
using namespace Arcane;

#include "FluxTermMng_axl.h"

class FluxTermMngService :
  public ArcaneFluxTermMngObject
{
public:
  /** Constructeur de la classe */
  FluxTermMngService(const Arcane::ServiceBuildInfo & sbi) :
    ArcaneFluxTermMngObject(sbi)
    {
      ;
    }

  /** Destructeur de la classe */
  virtual ~FluxTermMngService() {}

public:

  //! Initialisation
  void init();

  //---------------------------------------------------------------------------
  //! BoundaryCondition Management
  void
  setBoundaryConditionMng(IBoundaryConditionMng* bc_flow_mng)
  {
    m_bc_flow_mng = bc_flow_mng;
  }

  //---------------------------------------------------------------------------
  //! Operator Management

  //! Set Discrete Operator
  void
  setOperator(IDiscreteOperator* op)
  {
    m_op = op;
  }

  //! Prepare Operator
  void prepareOperator();

  //! Set Operator groups
  void getOperatorGroups();

  //! Clear Operator depending variables
  void clearOperator();

  //---------------------------------------------------------------------------
    //! Flux Implicit Contributions to a Linear System of Equations

  //! Add contribution of internal faces
  void addCInternalFacesContribution(
                              LinearSystemOneStepBuilder* system_builder,
                              IIndexManager* index_manager,
                              IIndexManager::Equation flow_eq,
                              IIndexManager::Entry u_entry
                             );

  //! Add contribution of internal faces with bdry faces in stencil
  void addCFInternalFacesContribution(
                              LinearSystemOneStepBuilder* system_builder,
                              IIndexManager* index_manager,
                              IIndexManager::Equation flow_eq,
                              IIndexManager::Entry u_entry,
                              IIndexManager::Entry uhb_Fi);

  //! Add contribution of bdry faces
  void addBoundaryFacesContribution(LinearSystemOneStepBuilder* system_builder,
                              IIndexManager* index_manager,
                              IIndexManager::Equation flow_eq,
                              IIndexManager::Entry u_entry,
                              IIndexManager::Entry uboundary_entry);

  //! Add bdry equation contributions
  void addBoundaryNonDirichletFacesContribution(LinearSystemOneStepBuilder* system_builder,
                              IIndexManager* index_manager,
                              IIndexManager::Equation boundary_eq,
                              IIndexManager::Entry u_entry,
                              IIndexManager::Entry uboundary_entry);

  //---------------------------------------------------------------------------
  // Compute Flux Values
  void computeCInternalFacesFluxValues( VariableFaceReal* ptr_face_normal_flux_velocity,
                                 const VariableCellReal&  cell_pressure);

  void computeCFInternalFacesFluxValues( VariableFaceReal* ptr_face_normal_flux_velocity,
                                 const VariableCellReal&  cell_pressure,
                                 const VariableFaceReal&  boundary_pressure);

  void computeBoundaryFacesFluxValues( VariableFaceReal* ptr_face_normal_flux_velocity,
                                 const VariableCellReal&  cell_pressure,
                                 const VariableFaceReal&  boundary_pressure);

private:
  //! Prepare Geometry Properties
  void prepareGeometryService();

  //! Boundary Face Contribution to Equations for one Face
  //! Used as an inline function boundary_flow_eq_F (Non dirichlet) and flow_Eq_T0
  void addEquationBoundaryFaceContribution(LinearSystemOneStepBuilder* system_builder,
                              IIndexManager* index_manager,
                              IIndexManager::EquationIndex flow_eq_T0,
                              const Face& F,
                              IIndexManager::Entry u_entry,
                              IIndexManager::Entry uboundary_entry);

private:

  // Discrete Operator
  IDiscreteOperator* m_op;

  // Groups
  CellGroup m_cells;
  FaceGroup m_faces;
  FaceGroup m_internal_faces;
  FaceGroup m_c_internal_faces;
  FaceGroup m_cf_internal_faces;
  FaceGroup m_boundary_faces;

  // Transmissivity Coefficients
  boost::shared_ptr<CoefficientArrayT<Cell> > m_cell_coefficients;
  boost::shared_ptr<CoefficientArrayT<Face> > m_face_coefficients;

  // Geometry Service
  IGeometryMng* m_geometry_service;

  // Boundary Conditions Manager
  IBoundaryConditionMng* m_bc_flow_mng;
};

#endif /* FLUXTERMMNGSERVICE_H */
