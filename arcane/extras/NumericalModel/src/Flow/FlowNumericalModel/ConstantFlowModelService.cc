// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
#include "Flow/FlowNumericalModel/ConstantFlowModelService.h"
/* Author : haeberlf at Fri Aug 29 14:29:07 2008
 * Generated by createNew
 */

using namespace Arcane;

#include "Appli/IAppServiceMng.h"

#include "Utils/Utils.h"

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

void
ConstantFlowModelService::
init()
{
  info() << "init";
  Real vx = options()->xVelocity() ;
  Real vy = options()->yVelocity() ;
  Real vz = options()->zVelocity() ;

  m_velocity = Real3(vx, vy, vz);

  //-----------------------------------------------------------------------------
  // Application Service Manager
  IServiceMng* service_mng = subDomain()->serviceMng();
  IAppServiceMng* app_service_mng = IAppServiceMng::instance(service_mng);

  //-----------------------------------------------------------------------------
  // Set Geometry Service
  info() << "Initialization Geometry Mng";
  m_geometry_service = app_service_mng->find<IGeometryMng>(true);
}

/*---------------------------------------------------------------------------*/

void
ConstantFlowModelService::
prepare()
{
  info() << "prepare";
  // Demande de calculs
    m_geometry_service->addItemGroupProperty(allFaces(), IGeometryProperty::PNormal);

    m_geometry_service->update();

}

/*---------------------------------------------------------------------------*/

void
ConstantFlowModelService::
apply()
{
  info() << "Apply";
  info() << "Compute Velocity Field and Normal Flux";

  const IGeometryMng::Real3GroupMap& face_normal = m_geometry_service->getReal3GroupMapProperty(allFaces(), IGeometryProperty::PNormal);

  ENUMERATE_FACE(iface,ownFaces())
  {
    const Face& F = *iface;
    Real3 nF = face_normal[F];
    Real3 vF = m_velocity;

    m_face_normal_flux_velocity[F] = math::scaMul(vF, nF);
  }

  ENUMERATE_CELL(icell,allCells())
    {
      const Cell& T = *icell;
      Real3 vT = m_velocity;
      m_cell_velocity[T] = vT;
    }
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

ARCANE_REGISTER_SERVICE_CONSTANTFLOWMODEL(ConstantFlowModel,ConstantFlowModelService);
