// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
#ifndef BASICFLOWMODELSERVICE_H
#define BASICFLOWMODELSERVICE_H
/* Author : haeberlf at Wed Aug 27 11:05:13 2008
 * Generated by createNew
 */

#include "Flow/FlowNumericalModel/IFlowNumericalModel.h"

#include <arcane/VariableTypes.h>
#include <arcane/VariableTypedef.h>

#include "Mesh/Interpolator/IInterpolator.h"
#include "Mesh/Geometry/IGeometryMng.h"

#include "Numerics/LinearSolver/ILinearSolver.h"

#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/vector.hpp>
#include <boost/numeric/ublas/vector_proxy.hpp>
#include <boost/numeric/ublas/io.hpp>

#include "Flow/FluxTerm/IFluxTermMng.h"

namespace Arcane { }
using namespace Arcane;

#include "BasicFlowModel_axl.h"

class BasicFlowModelService :
  public ArcaneBasicFlowModelObject
{
public:
  /** Constructeur de la classe */
  BasicFlowModelService(const Arcane::ServiceBuildInfo & sbi) :
    ArcaneBasicFlowModelObject(sbi)
    {
      ;
    }

  /** Destructeur de la classe */
  virtual ~BasicFlowModelService() {
    clear();
  }

public:

  //! Initialisation
  void init();

  //! Prepare
  void prepare();

  //! Apply service function
  void apply();

private :

  //! Apply service function
  void clear();

  //! Prepare Linear Solver
  void prepareLinearSolver();

  //! Prepare Equations and Entries
  void prepareEquationsEntries();

  //! Form linear Operator
  void formOperator();

  //! Compute Pressure
  void computePressure();

  //! Compute Velocity Flux
  void computeVelocityFlux();

  //! Compute Velocity
  void computeVelocity();

  //! Compute Velocity
  void checkFlow();

private :

  // Geometry Service
  IGeometryMng* m_geometry_service;

  // Linear Solver
  ILinearSolver* m_linear_solver;
  LinearSystemOneStepBuilder m_system_builder;

  // Flux Term
  IFluxTermMng* m_flux_term_service;
  IDivKGradDiscreteOperator* m_op;
  CellGroup m_cells;

  // Boundary Conditions
  IBoundaryConditionMng* m_bc_flow_mng;

  // Equations and Entries
  IIndexManager* m_index_manager;
  IIndexManager::Equation m_flow_eq;
  IIndexManager::Equation m_boundary_eq;
  IIndexManager::Entry m_u_entry;
  IIndexManager::Entry m_uboundary_entry;

};

#endif /* BASICFLOWMODELSERVICE_H */
