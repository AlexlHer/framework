#ifndef ARCGEOSIM_UTILS_ITEMVECTOR_H
#define ARCGEOSIM_UTILS_ITEMVECTOR_H
/* Author : havep at Mon Apr 28 17:47:07 2008
 * Generated by createNew
 */

#include <arcane/Item.h>
#include <arcane/ItemEnumerator.h>
#include <arcane/utils/Array.h>
#include <arcane/ItemTypes.h>
#include <arcane/utils/CArrayAll.h>
#include <arcane/ItemVectorView.h>

using namespace Arcane;

//! Similaire à ItemVectorView mais gère la "mémoire" sur les localIds
/*! La mémoire est "gèrée" à la manière de Array<> 
 *  Un ItemVector est valide tant que la famille sous-jascente ne change pas.
 */
class ItemVector
{
public:
  //! Constructeur vide
  ItemVector() { }

  //! Constructeur par copie
  ItemVector(const ItemVector & rhs)
    : m_items(rhs.m_items), m_local_ids(rhs.m_local_ids) { }

  //! Constructeur par référence sur ItemInternals et liste de localId
  /*! \warning copie les localIds
   */
  ItemVector(const ItemInternalArrayView &items, const Int32ConstArrayView & lids)
    : m_items(items), m_local_ids(lids) { }

  //! Constructeur par référence sur ItemInternals et liste de localId
  /*! \warning les localIds ne sont copiés que si do_clone vaut true
   */
  ItemVector(const ItemInternalArrayView &items, const Int32Array & lids, bool do_clone = false)
    : m_items(items), m_local_ids(lids,do_clone) { }

  //! Destructeur de la classe
  virtual ~ItemVector() { }
  
  //! Operateur de cast vers ItemVectorView
  operator ItemVectorView() const { return ItemVectorView(m_items,m_local_ids); }

  //! Accède au i-ème élément du vecteur
  inline Item operator[](Integer index) const
  {
    return m_items[ m_local_ids[index] ];
  }

  // Nombre d'éléments du vecteur
  inline Integer size() const
  {
    return m_local_ids.size(); 
  }

  //! Enumérateur
  inline ItemEnumerator enumerator() const
  {
    return ItemEnumerator(m_items.begin(),m_local_ids.begin(),
                          m_local_ids.size());
  }

  //! Conteneur de localIds
  /*! Peut etre directement utilisé pour construire un ItemGroup */
  Int32ConstArrayView localIds() const { return m_local_ids; }

protected:
  ItemInternalArrayView  m_items;
  Int32Array m_local_ids;
};



//! Version typée de ItemVector
/*! Un ItemVectorT est valide tant que la famille sous-jascente ne change pas.
 */
template<typename ItemType>
class ItemVectorT 
  : public ItemVector 
{
public:
  //! Constructeur vide
  ItemVectorT() 
    : ItemVector() { }

  //! Constructeur par copie
 	ItemVectorT(const ItemVectorT<ItemType> & rhs)
    : ItemVector(rhs) { }

  //! Constructeur par copie
 	ItemVectorT(const ItemVector &rhs)
    : ItemVector(rhs) { }
  
  //! Constructeur par référence sur ItemInternals et liste de localId
  /*! \warning copie les localIds
   */
  ItemVectorT(const ItemInternalArrayView &items, const Int32ConstArrayView & lids)
    : ItemVector(items,lids) { }

  //! Constructeur par référence sur ItemInternals et liste de localId
  /*! \warning les localIds ne sont copiés que si do_clone vaut true
   */
  ItemVectorT(const ItemInternalArrayView &items, const Int32Array &local_ids, bool do_clone = false)
    : ItemVector(items,local_ids,do_clone) { }

  //! Destructeur de la classe
  virtual ~ItemVectorT() { }

  //! Accède au i-ème élément du vecteur
  inline ItemType operator[] (Integer index) const
  {
    return ItemType(m_items.begin(),m_local_ids[index]);
  }

  //! Enumérateur
  ItemEnumeratorT<ItemType>	enumerator() const
  {
    return ItemEnumeratorT<ItemType>(m_items.begin(),m_local_ids.begin(),
                                     m_local_ids.size());
  }
};

#endif /* ARCGEOSIM_UTILS_ITEMVECTOR_H */
