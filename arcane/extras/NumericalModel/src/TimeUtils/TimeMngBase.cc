// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
/* Author : havep at Thu Apr  2 11:26:41 2009
 * Generated by createNew
 */


#include "Utils/Utils.h"

#include "Appli/IAppServiceMng.h"
#include "TimeUtils/ITimeMng.h"

#include <arcane/MathUtils.h>
#include <arcane/IParallelMng.h>
#include <arcane/ITimeLoopMng.h>
#include <arcane/ISubDomain.h>
#include <arcane/utils/NotImplementedException.h>

#include "TimeUtils/TimeMngBase.h"

using namespace Arcane;

/*---------------------------------------------------------------------------*/

TimeMngBase::TimeMngBase(ISubDomain * sd)
  : m_sub_domain(sd)
  , m_trace_mng(sd->traceMng())
  , m_global_iteration(VariableBuildInfo(sd,"GlobalIteration"))
  , m_global_time(VariableBuildInfo(sd,"GlobalTime"))
  , m_global_deltat(VariableBuildInfo(sd,"GlobalDeltaT"))
  , m_global_old_time(VariableBuildInfo(sd,"GlobalOldTime"))
  , m_global_old_deltat(VariableBuildInfo(sd,"GlobalOldDeltaT"))
  , m_global_final_time(VariableBuildInfo(sd,"GlobalFinalTime"))
  , m_global_cpu_time(VariableBuildInfo(sd,"GlobalCPUTime",IVariable::PNoRestore|IVariable::PExecutionDepend))
  , m_prepared(false)
  , m_verbose(true)
  , m_initialized(false)
{
  ;
}


/*---------------------------------------------------------------------------*/

void
TimeMngBase::
_init()
{
  if (m_initialized) return;

  m_app_service_mng = IAppServiceMng::instance(m_sub_domain->serviceMng());
  
  m_time_mng = m_app_service_mng->find<ITimeMng>(true) ;

  m_initialized = true;
}

/*---------------------------------------------------------------------------*/

void
TimeMngBase::
prepareInit()
{ 
  _init();
  m_time_mng->startTimeStep();
}

/*---------------------------------------------------------------------------*/

void
TimeMngBase::
init()
{
  _init();
  if (m_prepared) {
    this->endTimeStep();
  } else {
    // allow_verbose override default verbose options.
    // Disable info display on init
    bool old_verbose = m_verbose;
    m_verbose = false;
    m_prepared = true;
    this->endTimeStep();
    m_verbose = old_verbose;
  }
}

/*---------------------------------------------------------------------------*/

void
TimeMngBase::
continueInit()
{
  _init();
  throw NotImplementedException("TimeMngBase::continueInit","Not implemented");
}

/*---------------------------------------------------------------------------*/

void
TimeMngBase::
beginTimeStep()
{
  _init();
  if (m_prepared)
    m_trace_mng->fatal() << "Cannot call startTimeStep without endTimeStep : check your config file";
  m_prepared = true;
  
  m_time_mng->startTimeStep() ;
  if (m_verbose) {
    m_trace_mng->info();
    m_trace_mng->info()<<"|-----------------------------------------------------|";
    m_trace_mng->info()<<"| T(N)            | T(N+1)          | DT              |";
    m_trace_mng->info()<<"|"<<FORMAT(10,5)<<m_time_mng->getLastTime()
                       <<"|"
                       <<FORMAT(10,5)<<m_global_time()
                       <<"|"
                       <<FORMAT(10,5)<<m_global_deltat()
                       <<"|";
    m_trace_mng->info()<<"|-----------------------------------------------------|";
    m_trace_mng->info();
  }
}

/*---------------------------------------------------------------------------*/

bool
TimeMngBase::
endTimeStep()
{  
  _init();
  if (not m_prepared)
    m_trace_mng->fatal() << "Cannot call endTimeStep without startTimeStep : check your config file";
  m_prepared = false;

  const Real last_time = m_time_mng->getLastTime();
  const bool isNewTimeStepOk = m_time_mng->manageNewTimeStep() ;
  
  if (not isNewTimeStepOk)
    {
      m_trace_mng->error() << "Time Step Problem";
      return true;
    }

  if(m_time_mng->isCurrentTimeStepOk())
    {
      if (m_verbose) {
        m_trace_mng->info()<<"|-----------------------------------------------------|";
        m_trace_mng->info()<<"| T(N)            | T(N+1)          | DT              |";
        m_trace_mng->info()<<"|"<<FORMAT(10,5)<<last_time
                           <<"|"
                           <<FORMAT(10,5)<<m_global_time()
                           <<"|"
                           <<FORMAT(10,5)<<m_global_deltat()
                           <<"|";
        m_trace_mng->info()<<"|-----------------------------------------------------|";
      }
      m_time_mng->endTimeStep() ;
      m_global_deltat = m_time_mng->getCurrentTimeStep() ;
      if(m_global_time() >= m_time_mng->getFinalTime())
        {
          if (m_global_deltat()!=0.)
            m_trace_mng->error() << "Final time step inconsistent"; // non fatal mais bizarre
          return true;
        }
    }
  else
    {
      if(m_time_mng->timeLoopHasToBeStopped())
      {
        m_trace_mng->info()<<"|------------------------------|";
        m_trace_mng->info()<<"|Time Loop has to be stop      |";
        m_trace_mng->info()<<"|Time "<<FORMAT(10,5)<<last_time<<"    |";
        m_trace_mng->info()<<"|------------------------------|";
        return true;
      }
      // Le pas de temps doit etre rejoue avec un nouveau pas de temps
      m_global_time = last_time ;
      m_time_mng->endTimeStep() ;
      m_global_deltat = m_time_mng->getCurrentTimeStep() ;
      m_trace_mng->info()<<"|------------------------------|";
      m_trace_mng->info()<<"|Time Step has to be run again |";
      m_trace_mng->info()<<"|Old Time "<<FORMAT(10,5)<<last_time<<"|";
      m_trace_mng->info()<<"|------------------------------|";
    }
  return false;
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
