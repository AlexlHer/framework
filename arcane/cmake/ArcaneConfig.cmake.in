set(Arcane_VERSION @Arcane_VERSION@)

@PACKAGE_INIT@

# ----------------------------------------------------------------------------
# Défini une variable 'ARCANE_PREFIX_DIR' car PACKAGE_PREFIX_DIR
# peut changer avec des includes
set(ARCANE_PREFIX_DIR "${PACKAGE_PREFIX_DIR}")
include(${CMAKE_CURRENT_LIST_DIR}/ArcanePathHints.cmake)

# ----------------------------------------------------------------------------
# Récupère le chemin de 'arccore'
# Il faut dire à Arcane de ne pas faire les find_dependency() car cela
# nécessite l'utilisation de Arccon et aussi de positionner par l'utilisateur
# les chemins des différents packages.
set(ARCCORE_NO_FIND_DEPENDENCY TRUE)
find_package(Arccore REQUIRED
  HINTS "${ARCANE_ARCCORE_HINT_PATH}"
  "${ARCANE_PREFIX_DIR}/${ARCANE_ARCCORE_CONFIG_INSTALL_DIR}"
  )

# ----------------------------------------------------------------------------
# Récupère le chemin de 'axl2cc'
# On positionne une variable 'ARCANE_AXL2CC' pour des raisons de compatibilité
# mais il faudrait utiliser directement AXLSTAR_AXL2CC.

find_package(Axlstar REQUIRED
  HINTS "${ARCANE_AXLSTAR_HINT_PATH}"
  "${ARCANE_PREFIX_DIR}/${ARCANE_AXLSTAR_CONFIG_INSTALL_DIR}"
  )
if (NOT AXLSTAR_AXL2CC)
  message(FATAL_ERROR "Variable 'AXLSTAR_AXL2CC' is not defined")
endif()
set(ARCANE_AXL2CC "${AXLSTAR_AXL2CC}")

# ----------------------------------------------------------------------------

include(${CMAKE_CURRENT_LIST_DIR}/ArcaneTargets.cmake)

# ----------------------------------------------------------------------------

# Chemins pour MPI (nécessite d'avoir inclus ArcaneTargets)
if(TARGET arcane_mpi)
  if(NOT MPIEXEC_EXECUTABLE)
    set(MPIEXEC_EXECUTABLE @MPIEXEC_EXECUTABLE@)
    set(MPIEXEC_NUMPROC_FLAG @MPIEXEC_NUMPROC_FLAG@)
  endif()
endif()


get_target_property(_AFULL arcane_full INTERFACE_LINK_LIBRARIES)

# Parcours l'ensemble des cibles de cette bibliothèque interface
# et définit une variable 'Arcane_INCLUDE_DIRS' qui
# servira pour le find_packages.
# NOTE: on est obligé de déterminer cette liste dans ce fichier
# car si on utilise les 'generator-expression' de cmake, la valeurs
# des variables dépend de la configuration.
foreach(package ${_AFULL})
  if(TARGET ${package})
    get_target_property(_AINC ${package} INTERFACE_INCLUDE_DIRECTORIES)
    if (_AINC)
      list(APPEND _AINCFULL ${_AINC})
    endif (_AINC)
  endif(TARGET ${package})
endforeach(package ${_AFULL})
list(REMOVE_DUPLICATES _AINCFULL)

set(Arcane_LIBRARIES arcane_full)
set(Arcane_INCLUDE_DIRS ${_AINCFULL})

check_required_components(Arcane)

set(Arcane_FOUND YES)

# ----------------------------------------------------------------------------
# Macro pour générer les _axl.h à partir des fichier axl
macro(arcane_generate_axl filename)
  get_filename_component(_base_filename ${filename} NAME)
  get_filename_component(_base_dirname ${filename} DIRECTORY)
  set(dirname ${CMAKE_CURRENT_BINARY_DIR}/${_base_dirname})
  file(MAKE_DIRECTORY ${dirname})
  message(STATUS "Adding AXL generation '${filename}.axl' in '${dirname}'")
  set_source_files_properties(${dirname}/${_base_filename}_axl.h PROPERTIES GENERATED TRUE)
  add_custom_command(OUTPUT ${dirname}/${_base_filename}_axl.h 
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${filename}.axl
    COMMAND ${ARCANE_AXL2CC} ARGS -o ${dirname} ${CMAKE_CURRENT_SOURCE_DIR}/${filename}.axl)
endmacro()

# Macro pour ajouter le fichier 'axlfilename' à la cible 'target'
macro(arcane_target_add_axl target axlfilename)
  arcane_generate_axl(${axlfilename})
  target_sources(${target} PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/${axlfilename}_axl.h)
  target_include_directories(${target} PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
endmacro()

# Fonction pour ajouter à la cible `target_name` les bibliothèques nécessaires
# pour utiliser Arcane.
# En fonction des plateformes, il est possible qu'il y ait besoin d'arguments
# spécifiques
function(arcane_add_arcane_libraries_to_target target_name)
  target_link_libraries(${target_name} PRIVATE arcane_full)
endfunction()

# ----------------------------------------------------------------------------
# Local Variables:
# tab-width: 2
# indent-tabs-mode: nil
# coding: utf-8
# End:
