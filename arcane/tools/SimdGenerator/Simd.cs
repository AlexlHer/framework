// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace SimdGenerator {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class Simd : SimdBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            
            this.Write("\n");
            
            
            
            
            
 ISimdClass simd_class = SimdClass.CurrentType; 
            
            
            
            
            
 string simd_name = simd_class.ClassName; 
            
            
            
            
            
            this.Write("\n/*---------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------*/\n");
            
            
            
            
            
 if (simd_class.IsEmulated){ 
            
            
            
            
            
            this.Write("\n");
            
            
            
            
            
 // Génération des operations binaires
   foreach(BinaryOperation op in GenerateHelper.BinaryOperations) {
     string cpp_symbol = CppHelper.OpSymbolName(op);
     string cpp_func_namespace = CppHelper.OpFuncNamespace(op);
     string cpp_op_func_name = CppHelper.OpFuncName(op);
     int simd_length = simd_class.DoubleVectorLength;
     bool has_namespace = !String.IsNullOrEmpty(cpp_func_namespace);

            
            
            
            
            
 if (has_namespace) { 
            
            
            
            
            
            this.Write("namespace ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( cpp_func_namespace ));
            
            
            
            
            
            this.Write(" {\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("// Emulated Binary operation ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( cpp_op_func_name ));
            
            
            
            
            
            this.Write("\ninline ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(cpp_op_func_name ));
            
            
            
            
            
            this.Write(" (");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" a,");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" b)\n{\n  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write("::fromScalar(");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(CppHelper.ComputeArgs(cpp_symbol,cpp_op_func_name,true,true,simd_class)));
            
            
            
            
            
            this.Write(");\n}\n\ninline ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(cpp_op_func_name ));
            
            
            
            
            
            this.Write("(");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" a,Real b)\n{\n  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write("::fromScalar(");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(CppHelper.ComputeArgs(cpp_symbol,cpp_op_func_name,true,false,simd_class)));
            
            
            
            
            
            this.Write(");\n}\n\ninline ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(cpp_op_func_name ));
            
            
            
            
            
            this.Write("(Real a,");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" b)\n{\n  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write("::fromScalar(");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(CppHelper.ComputeArgs(cpp_symbol,cpp_op_func_name,false,true,simd_class)));
            
            
            
            
            
            this.Write(");\n}\n");
            
            
            
            
            
 if (has_namespace) { 
            
            
            
            
            
            this.Write("}\n");
            
            
            
            
            
 } 
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("\n");
            
            
            
            
            
 } else { 
            
            
            
            
            
            this.Write(" // IsEmulated\n\n");
            
            
            
            
            
 // Génération des operations binaires
   foreach(BinaryOperation op in GenerateHelper.BinaryOperations) {
     string op_func_name = simd_class.OpName(op);
     string cpp_func_namespace = CppHelper.OpFuncNamespace(op);
     string cpp_op_func_name = CppHelper.OpFuncName(op);
     int nb_native_vector = simd_class.NbNativeVector;
     bool has_namespace = !String.IsNullOrEmpty(cpp_func_namespace);

            
            
            
            
            
 if (has_namespace) { 
            
            
            
            
            
            this.Write("namespace ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( cpp_func_namespace ));
            
            
            
            
            
            this.Write(" {\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("// Binary operation ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( cpp_op_func_name ));
            
            
            
            
            
            this.Write("\ninline ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(cpp_op_func_name ));
            
            
            
            
            
            this.Write(" (");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" a,");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" b)\n{\n  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write("(\n   ");
            
            
            
            
            
 for( int k=0; k<nb_native_vector; ++k ){
     if (k != 0) { 
            
            
            
            
            
            this.Write(" , ");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("  ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(op_func_name));
            
            
            
            
            
            this.Write(" (a.v");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(k));
            
            
            
            
            
            this.Write(",b.v");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(k));
            
            
            
            
            
            this.Write(")\n   ");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("   );\n}\n\ninline ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(cpp_op_func_name ));
            
            
            
            
            
            this.Write("(");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" a,Real b)\n{\n  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write("(\n   ");
            
            
            
            
            
 for( int k=0; k<nb_native_vector; ++k ){
      if (k != 0) { 
            
            
            
            
            
            this.Write(" , ");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write(" ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(op_func_name));
            
            
            
            
            
            this.Write(" (a.v");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(k));
            
            
            
            
            
            this.Write(",");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_class.FromScalar("b")));
            
            
            
            
            
            this.Write(")\n  ");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("  );\n}\n\ninline ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(cpp_op_func_name ));
            
            
            
            
            
            this.Write("(Real b,");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" a)\n{\n  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write("(\n   ");
            
            
            
            
            
 for( int k=0; k<nb_native_vector; ++k ){
      if (k != 0) { 
            
            
            
            
            
            this.Write(" , ");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write(" ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(op_func_name));
            
            
            
            
            
            this.Write(" (");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_class.FromScalar("b")));
            
            
            
            
            
            this.Write(", a.v");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(k));
            
            
            
            
            
            this.Write(")\n   ");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("   );\n}\n");
            
            
            
            
            
 if (has_namespace) { 
            
            
            
            
            
            this.Write("}\n");
            
            
            
            
            
 } 
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write(" // IsEmulated\n/*---------------------------------------------------------------------------*/\n/*---------------------------------------------------------------------------*/\n\n");
            
            
            
            
            
 // Génération des operations unaires
   foreach(UnaryOperation op in GenerateHelper.UnaryOperations) {
     string cpp_op_func_name = CppHelper.OpFuncName(op);
     string cpp_qualified_func_name = CppHelper.QualifiedFuncName(op);
     string cpp_func_namespace = CppHelper.OpFuncNamespace(op);
     string simd_func_name = simd_class.OpName(op);
     bool has_simd = !String.IsNullOrEmpty(simd_func_name);
     bool has_namespace = !String.IsNullOrEmpty(cpp_func_namespace);
     // L'operateur unaire '-' n'est pas generé.
     if (cpp_op_func_name=="operator-")
       continue;

            
            
            
            
            
 if (has_namespace) { 
            
            
            
            
            
            this.Write("namespace ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( cpp_func_namespace ));
            
            
            
            
            
            this.Write(" {\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("// Unary operation ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture( cpp_op_func_name ));
            
            
            
            
            
            this.Write("\ninline ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(cpp_op_func_name ));
            
            
            
            
            
            this.Write(" (");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write(" a)\n{\n");
            
            
            
            
            
 if (has_simd) { 
            
            
            
            
            
            this.Write("  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write("(");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_func_name));
            
            
            
            
            
            this.Write("(a.v0));\n");
            
            
            
            
            
 } else { 
            
            
            
            
            
            this.Write("  Real* za = (Real*)(&a);\n  return ");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(simd_name));
            
            
            
            
            
            this.Write("::fromScalar(");
            
            
            
            
            
            this.Write(this.ToStringHelper.ToStringWithCulture(CppHelper.ComputeArgs(cpp_qualified_func_name,"za",simd_class)));
            
            
            
            
            
            this.Write(");\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("}\n");
            
            
            
            
            
 if (has_namespace) { 
            
            
            
            
            
            this.Write("}\n");
            
            
            
            
            
 } 
            
            
            
            
            
            this.Write("\n");
            
            
            
            
            
 } 
            
            
            
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class SimdBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
