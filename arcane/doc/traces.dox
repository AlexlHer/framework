// -*- tab-width: 2; indent-tabs-mode: nil; coding: utf-8-with-signature -*-
// -*- C++ -*-
/*!
  \page arcanedoc_traces Utilisation des traces
	
  \section arcanedoc_traces_intro Introduction

  ARCANE fournit une classe utilitaire (\c TraceAccessor) pour afficher des traces dans les modules.
  Cette classe permet de gérer plusieurs types de traces : informations, erreurs, ...

  Si dans le descripteur de module, l'attribut \c parent-name de l'élément
  \c module vaut \c BasicModule (le défaut), les traces sont automatiquement disponibles.

  Les traces s'utilisent comme des flots classiques en C++, grâce à
  l'operateur <<.

  Par exemple, pour afficher une trace d'information :

  \code
  info() << "Ceci est un message d'information";
  \endcode

  Tous les types C++ qui disposent de l'opérateur << peuvent être tracés. Par exemple :
  
  \code
  int z = 3;
  info() << "z vaut " << z;
  \endcode

  A noter qu'un retour chariot est effectué automatiquement entre
  chaque message. Par conséquent l'ajout d'un retour chariot en fin de trace
  provoque un saut de ligne.

  \section arcanedoc_traces_class Catégories de trace

  Les méthodes de trace sont :
  - \b info pour les traces d'informations,
  - \b debug pour les traces de debug,
  - \b log pour les traces de log,
  - \b warning pour les traces d'avertissement,
  - \b error pour les traces d'erreur,
  - \b fatal pour les traces d'erreur fatale, ce qui arrête l'exécution.

  Les traces d'avertissement ou d'erreur (warning(), error() et
  fatal()) sont toujours affichées. Pour les traces d'informations
  (info()) et de débug (debug()), le comportement dépend de l'exécution
  séquentielle ou parallèle et si ARCANE est compilée en mode débug ou
  optimisé:
  - en mode optimisé, les traces de débug ne sont jamais actives. De
  plus, la méthode debug() est remplacée par une méthode vide ce qui
  fait qu'elle ne prend aucune ressource CPU.
  - en mode optimisé, par défaut, les traces d'informations ne sont
  affichées que par le sous-domaine 0. Ce comportement est configurable
  (voir section \ref arcanedoc_traces_config).
  - en mode débug, les traces du sous-domaine 0 s'affichent sur la
  sortie standard. Les traces des autres sous-domaines sont écrites
  dans un fichier de nom 'output%n', où '%n' est le numéro du
  sous-domaine.

  Les traces de log sont écrites dans un fichier dans le répertoire
  'listing', sous le nom 'log.%n', avec '%n' le numéro du
  sous-domaine.
  
  Il existe 4 méthodes pour la gestion parallèle des traces:
  - \b pinfo pour les traces d'informations,
  - \b pwarning pour les traces d'avertissement,
  - \b perror pour les traces d'erreur,
  - \b pfatal pour les traces d'erreur fatale, ce qui arrête l'exécution.

  Pour pinfo(), chaque sous-domaine affiche le message. Pour les
  autres (pwarning(), perror() et pfatal()), cela signifie que chaque
  sous-domaine appelle cette méthode (opération collective), et donc
  une seule trace sera  affichée. Ces traces parallèles peuvent par
  exemple être utiles lorsqu'on est certain que l'erreur produite le
  sera par tous les processeurs, par exemple, une erreur dans le jeu
  de données. Il faut prendre soin que tous les sous-domaines
  appellent les méthodes parallèle, car cela peut conduire à un
  blocage du code dans le cas contraire.

  Il faut noter qu'en cas d'appel à la méthode fatal() en parallèle,
  les processus sont en général tués sans ménagement. Avec pfatal(),
  il est possible d'arrêter le code proprement puisque chaque
  sous-domaine génère l'erreur.

  Il existe trois niveaux de traces pour la catégorie \c debug : \a
  Trace::Low, \a Trace::Medium et \a Trace::High. Le niveau par défaut
  est \a Trace::Medium.

  \code
  debug(Trace::Medium) << "Trace debug moyen"
  debug()              << "Trace debug moyen"
  debug(Trace::Low)    << "Trace debug affiché dès que le mode débug est utilisé"
  \endcode

  \section arcanedoc_traces_config Configuration des traces

  Il est possible de configurer le niveau de debug souhaité et
  l'utilisation des traces d'informations pour chaque module
  dans le fichier de configuration de ARCANE. Ce fichier de configuration 
  utilisateur permet de modifier le comportement
  par défaut de certains éléments de l'architecture comme par exemple
  l'affichage des traces. Il est nommé <em>config.xml</em> et 
  se trouve dans le répertoire <tt>.arcane</tt> du compte de l'utilisateur
  qui lance l'exécution.

  La configuration se fait avec les attributs
  \c name, \c info et \c debug de l'élément \c trace-module. 
  Cet élément doit être fils de l'élément \c traces.

  - \b name spécifie le nom du module concerné
  - \b info vaut \e true s'il faut afficher les traces d'informations,
  \e false sinon.
  - \b debug vaut \e none, \e low, \e medium ou \e high suivant le niveau de débug souhaité.
    Les traces de débug d'un niveau supérieur à celui demandé ne sont
    pas affichées. Le niveau \e high correspond à toutes les traces.

  Voici un exemple de fichier : 

  \code
  *<?xml version="1.0" encoding="ISO-8859-1" ?>
  *<arcane-config>
  *  <traces>
  *    <trace-class name="*" info="true" debug="none" />
  *    <trace-class name="Hydro" info="true" debug="medium" />
  *    <trace-class name="ParallelMng" info="true" print-class-name="false" print-elapsed-time="true" />
  *  </traces>
  *</arcane-config>
  \endcode

  Dans l'exemple, l'utilisateur demande à ce que les traces d'informations 
  pour tous les modules soient par défaut activées et pas les traces de debug.
  Pour le module Hydro, sont affichées les traces d'informations et les traces 
  de debug jusqu'au niveau \e medium.
  Pour la classe de message ParallelMng, on affiche les infos et le
  temps écoulé mais pas le nom de la classe du message (c'est à dire
  le début de la ligne '*I-ParallelMng'.

  \note Quelle que soit la configuration, les traces de débug ne
  sont pas disponibles en version optimisée complète.

  Il est possible de changer dynamiquement les informations d'une
  classe de message. Par exemple le code suivant permet depuis un module ou service de
  changer le niveau de verbosité et d'afficher le temps écoulé
  mais pas le nom de la classe de de message:

  \code
  * ITraceMng* tm = traceMng();
  * TraceClassConfig tcc = tm->classConfig("MyTest");
  * tcc.setFlags(Trace::PF_ElapsedTime|Trace::PF_NoClassName);
  * tcc.setVerboseLevel(4);
  * tm->setClassConfig("MyTest",tcc);
  \endcode

*/
