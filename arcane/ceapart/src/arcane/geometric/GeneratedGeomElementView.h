// WARNING: This file is generated by a tool. DO NOT EDIT.
/*
 * Génération des classes des vues sur les éléments géométriques (GeomElement).
 */

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Triangle3.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Triangle3ShapeView.
 * - directement depuis une instance de Triangle3Element
 * - une instance de Triangle3ElementView via Triangle3ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toTriangle3Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Triangle3ElementConstView
: public GeomElementConstViewBase
{
 public:
  Triangle3ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Triangle3.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Triangle3Element
 * - une instance de Triangle3Element via Triangle3ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Triangle3ElementView
: public GeomElementViewBase
{
 public:
  typedef Triangle3ElementConstView ConstViewType;
 public:
  Triangle3ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
     }
  //! Opérateur de conversion vers une vue constante
  operator Triangle3ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Triangle3ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Triangle3
typedef Triangle3ElementView TriangleElementView;
//! Vue constante sur un élément de type GeomType::Triangle3
typedef Triangle3ElementConstView TriangleElementConstView;


/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Quad4.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Quad4ShapeView.
 * - directement depuis une instance de Quad4Element
 * - une instance de Quad4ElementView via Quad4ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toQuad4Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Quad4ElementConstView
: public GeomElementConstViewBase
{
 public:
  Quad4ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Quad4.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Quad4Element
 * - une instance de Quad4Element via Quad4ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Quad4ElementView
: public GeomElementViewBase
{
 public:
  typedef Quad4ElementConstView ConstViewType;
 public:
  Quad4ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
     }
  //! Opérateur de conversion vers une vue constante
  operator Quad4ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Quad4ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Quad4
typedef Quad4ElementView QuadElementView;
//! Vue constante sur un élément de type GeomType::Quad4
typedef Quad4ElementConstView QuadElementConstView;


/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Pentagon5.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Pentagon5ShapeView.
 * - directement depuis une instance de Pentagon5Element
 * - une instance de Pentagon5ElementView via Pentagon5ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toPentagon5Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pentagon5ElementConstView
: public GeomElementConstViewBase
{
 public:
  Pentagon5ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Pentagon5.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Pentagon5Element
 * - une instance de Pentagon5Element via Pentagon5ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pentagon5ElementView
: public GeomElementViewBase
{
 public:
  typedef Pentagon5ElementConstView ConstViewType;
 public:
  Pentagon5ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
     }
  //! Opérateur de conversion vers une vue constante
  operator Pentagon5ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Pentagon5ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Pentagon5
typedef Pentagon5ElementView PentagonElementView;
//! Vue constante sur un élément de type GeomType::Pentagon5
typedef Pentagon5ElementConstView PentagonElementConstView;


/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Hexagon6.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Hexagon6ShapeView.
 * - directement depuis une instance de Hexagon6Element
 * - une instance de Hexagon6ElementView via Hexagon6ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toHexagon6Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Hexagon6ElementConstView
: public GeomElementConstViewBase
{
 public:
  Hexagon6ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Hexagon6.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Hexagon6Element
 * - une instance de Hexagon6Element via Hexagon6ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Hexagon6ElementView
: public GeomElementViewBase
{
 public:
  typedef Hexagon6ElementConstView ConstViewType;
 public:
  Hexagon6ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
     }
  //! Opérateur de conversion vers une vue constante
  operator Hexagon6ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Hexagon6ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Hexagon6
typedef Hexagon6ElementView HexagonElementView;
//! Vue constante sur un élément de type GeomType::Hexagon6
typedef Hexagon6ElementConstView HexagonElementConstView;


/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Tetraedron4.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Tetraedron4ShapeView.
 * - directement depuis une instance de Tetraedron4Element
 * - une instance de Tetraedron4ElementView via Tetraedron4ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toTetraedron4Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Tetraedron4ElementConstView
: public GeomElementConstViewBase
{
 public:
  Tetraedron4ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Tetraedron4.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Tetraedron4Element
 * - une instance de Tetraedron4Element via Tetraedron4ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Tetraedron4ElementView
: public GeomElementViewBase
{
 public:
  typedef Tetraedron4ElementConstView ConstViewType;
 public:
  Tetraedron4ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
     }
  //! Opérateur de conversion vers une vue constante
  operator Tetraedron4ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Tetraedron4ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Tetraedron4
typedef Tetraedron4ElementView TetraElementView;
//! Vue constante sur un élément de type GeomType::Tetraedron4
typedef Tetraedron4ElementConstView TetraElementConstView;


/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Pyramid5.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Pyramid5ShapeView.
 * - directement depuis une instance de Pyramid5Element
 * - une instance de Pyramid5ElementView via Pyramid5ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toPyramid5Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pyramid5ElementConstView
: public GeomElementConstViewBase
{
 public:
  Pyramid5ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Pyramid5.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Pyramid5Element
 * - une instance de Pyramid5Element via Pyramid5ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pyramid5ElementView
: public GeomElementViewBase
{
 public:
  typedef Pyramid5ElementConstView ConstViewType;
 public:
  Pyramid5ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
     }
  //! Opérateur de conversion vers une vue constante
  operator Pyramid5ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Pyramid5ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Pyramid5
typedef Pyramid5ElementView PyramidElementView;
//! Vue constante sur un élément de type GeomType::Pyramid5
typedef Pyramid5ElementConstView PyramidElementConstView;


/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Pentaedron6.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Pentaedron6ShapeView.
 * - directement depuis une instance de Pentaedron6Element
 * - une instance de Pentaedron6ElementView via Pentaedron6ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toPentaedron6Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pentaedron6ElementConstView
: public GeomElementConstViewBase
{
 public:
  Pentaedron6ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Pentaedron6.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Pentaedron6Element
 * - une instance de Pentaedron6Element via Pentaedron6ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pentaedron6ElementView
: public GeomElementViewBase
{
 public:
  typedef Pentaedron6ElementConstView ConstViewType;
 public:
  Pentaedron6ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
     }
  //! Opérateur de conversion vers une vue constante
  operator Pentaedron6ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Pentaedron6ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Pentaedron6
typedef Pentaedron6ElementView PentaElementView;
//! Vue constante sur un élément de type GeomType::Pentaedron6
typedef Pentaedron6ElementConstView PentaElementConstView;


/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Hexaedron8.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Hexaedron8ShapeView.
 * - directement depuis une instance de Hexaedron8Element
 * - une instance de Hexaedron8ElementView via Hexaedron8ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toHexaedron8Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Hexaedron8ElementConstView
: public GeomElementConstViewBase
{
 public:
  Hexaedron8ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Hexaedron8.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Hexaedron8Element
 * - une instance de Hexaedron8Element via Hexaedron8ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Hexaedron8ElementView
: public GeomElementViewBase
{
 public:
  typedef Hexaedron8ElementConstView ConstViewType;
 public:
  Hexaedron8ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5, const Real3& a6, const Real3& a7)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
      m_s[6] = a6;
      m_s[7] = a7;
     }
  //! Opérateur de conversion vers une vue constante
  operator Hexaedron8ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Hexaedron8ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Hexaedron8
typedef Hexaedron8ElementView HexaElementView;
//! Vue constante sur un élément de type GeomType::Hexaedron8
typedef Hexaedron8ElementConstView HexaElementConstView;


/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Heptaedron10.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Heptaedron10ShapeView.
 * - directement depuis une instance de Heptaedron10Element
 * - une instance de Heptaedron10ElementView via Heptaedron10ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toHeptaedron10Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Heptaedron10ElementConstView
: public GeomElementConstViewBase
{
 public:
  Heptaedron10ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Heptaedron10.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Heptaedron10Element
 * - une instance de Heptaedron10Element via Heptaedron10ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Heptaedron10ElementView
: public GeomElementViewBase
{
 public:
  typedef Heptaedron10ElementConstView ConstViewType;
 public:
  Heptaedron10ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5, const Real3& a6, const Real3& a7, const Real3& a8, const Real3& a9)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
      m_s[6] = a6;
      m_s[7] = a7;
      m_s[8] = a8;
      m_s[9] = a9;
     }
  //! Opérateur de conversion vers une vue constante
  operator Heptaedron10ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Heptaedron10ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Heptaedron10
typedef Heptaedron10ElementView Wedge7ElementView;
//! Vue constante sur un élément de type GeomType::Heptaedron10
typedef Heptaedron10ElementConstView Wedge7ElementConstView;


/*!
 * \ingroup ArcaneGeometric
 * \brief Vue constante sur les éléments géométriques de type GeomType::Octaedron12.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Octaedron12ShapeView.
 * - directement depuis une instance de Octaedron12Element
 * - une instance de Octaedron12ElementView via Octaedron12ElementView::constView()
 * - une instance de GeomShapeView via GeomShapeView::toOctaedron12Element()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Octaedron12ElementConstView
: public GeomElementConstViewBase
{
 public:
  Octaedron12ElementConstView(ARCANE_RESTRICT const Real3POD* ptr)
  : GeomElementConstViewBase(ptr){}
};

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue modifiable sur les éléments géométriques de type GeomType::Octaedron12.
 * 
 * Il est possible de récupérer une vue de ce type via:
 * - directement depuis une instance de Octaedron12Element
 * - une instance de Octaedron12Element via Octaedron12ElementView::view()
 *
 * Pour plus d'informations sur l'usage, se reporter à \ref arcanedoc_cea_geometric_viewusage
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Octaedron12ElementView
: public GeomElementViewBase
{
 public:
  typedef Octaedron12ElementConstView ConstViewType;
 public:
  Octaedron12ElementView(ARCANE_RESTRICT Real3POD* ptr)
  : GeomElementViewBase(ptr){}
  //! Initialise la vue avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5, const Real3& a6, const Real3& a7, const Real3& a8, const Real3& a9, const Real3& a10, const Real3& a11)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
      m_s[6] = a6;
      m_s[7] = a7;
      m_s[8] = a8;
      m_s[9] = a9;
      m_s[10] = a10;
      m_s[11] = a11;
     }
  //! Opérateur de conversion vers une vue constante
  operator Octaedron12ElementConstView() const { return ConstViewType(m_s); }
  //! Vue constante sur l'élément
  Octaedron12ElementConstView constView() const { return ConstViewType(m_s); }
};

//! Vue sur un élément de type GeomType::Octaedron12
typedef Octaedron12ElementView Wedge8ElementView;
//! Vue constante sur un élément de type GeomType::Octaedron12
typedef Octaedron12ElementConstView Wedge8ElementConstView;

