// WARNING: This file is generated by a tool. DO NOT EDIT.
/*
 * Génération des classes des vues spécifiques des GeomShapeView.
 */
/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Triangle3.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Triangle3ShapeView
: public GeomShape2DView
{
 public: 
  
  typedef TriangleElementConstView ElementConstView;
  typedef TriangleElementView ElementView;
  typedef TriangleElement ElementType;
  typedef Quad4Element SVCElement;
  typedef Quad4ElementView SVCElementView;

 public:

  Triangle3ShapeView() {}
  explicit Triangle3ShapeView(const GeomShapeView& rhs)
  : GeomShape2DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Triangle3);
  }

  //! Nombre de noeuds de la forme (retourne \a 3)
  static Integer nbNode() { return 3; }
  //! Type de la forme (retourne \a GeomType::Triangle3 )
  static GeomType geomType() { return GeomType::Triangle3; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Quad4ElementView svc, Integer i) { fillSubZoneTriangle(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Triangle3ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Triangle3ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Triangle3ShapeView TriangleShapeView;

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Quad4.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Quad4ShapeView
: public GeomShape2DView
{
 public: 
  
  typedef QuadElementConstView ElementConstView;
  typedef QuadElementView ElementView;
  typedef QuadElement ElementType;
  typedef Quad4Element SVCElement;
  typedef Quad4ElementView SVCElementView;

 public:

  Quad4ShapeView() {}
  explicit Quad4ShapeView(const GeomShapeView& rhs)
  : GeomShape2DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Quad4);
  }

  //! Nombre de noeuds de la forme (retourne \a 4)
  static Integer nbNode() { return 4; }
  //! Type de la forme (retourne \a GeomType::Quad4 )
  static GeomType geomType() { return GeomType::Quad4; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Quad4ElementView svc, Integer i) { fillSubZoneQuad(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Quad4ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Quad4ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Quad4ShapeView QuadShapeView;

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Pentagon5.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pentagon5ShapeView
: public GeomShape2DView
{
 public: 
  
  typedef PentagonElementConstView ElementConstView;
  typedef PentagonElementView ElementView;
  typedef PentagonElement ElementType;
  typedef Quad4Element SVCElement;
  typedef Quad4ElementView SVCElementView;

 public:

  Pentagon5ShapeView() {}
  explicit Pentagon5ShapeView(const GeomShapeView& rhs)
  : GeomShape2DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Pentagon5);
  }

  //! Nombre de noeuds de la forme (retourne \a 5)
  static Integer nbNode() { return 5; }
  //! Type de la forme (retourne \a GeomType::Pentagon5 )
  static GeomType geomType() { return GeomType::Pentagon5; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Quad4ElementView svc, Integer i) { fillSubZonePentagon(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Pentagon5ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Pentagon5ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Pentagon5ShapeView PentagonShapeView;

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Hexagon6.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Hexagon6ShapeView
: public GeomShape2DView
{
 public: 
  
  typedef HexagonElementConstView ElementConstView;
  typedef HexagonElementView ElementView;
  typedef HexagonElement ElementType;
  typedef Quad4Element SVCElement;
  typedef Quad4ElementView SVCElementView;

 public:

  Hexagon6ShapeView() {}
  explicit Hexagon6ShapeView(const GeomShapeView& rhs)
  : GeomShape2DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Hexagon6);
  }

  //! Nombre de noeuds de la forme (retourne \a 6)
  static Integer nbNode() { return 6; }
  //! Type de la forme (retourne \a GeomType::Hexagon6 )
  static GeomType geomType() { return GeomType::Hexagon6; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Quad4ElementView svc, Integer i) { fillSubZoneHexagon(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Hexagon6ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Hexagon6ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Hexagon6ShapeView HexagonShapeView;

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Tetraedron4.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Tetraedron4ShapeView
: public GeomShape3DView
{
 public: 
  
  typedef TetraElementConstView ElementConstView;
  typedef TetraElementView ElementView;
  typedef TetraElement ElementType;
  typedef Hexaedron8Element SVCElement;
  typedef Hexaedron8ElementView SVCElementView;

 public:

  Tetraedron4ShapeView() {}
  explicit Tetraedron4ShapeView(const GeomShapeView& rhs)
  : GeomShape3DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Tetraedron4);
  }

  //! Nombre de noeuds de la forme (retourne \a 4)
  static Integer nbNode() { return 4; }
  //! Type de la forme (retourne \a GeomType::Tetraedron4 )
  static GeomType geomType() { return GeomType::Tetraedron4; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Hexaedron8ElementView svc, Integer i) { fillSubZoneTetra(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Tetraedron4ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Tetraedron4ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Tetraedron4ShapeView TetraShapeView;

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Pyramid5.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pyramid5ShapeView
: public GeomShape3DView
{
 public: 
  
  typedef PyramidElementConstView ElementConstView;
  typedef PyramidElementView ElementView;
  typedef PyramidElement ElementType;
  typedef Hexaedron8Element SVCElement;
  typedef Hexaedron8ElementView SVCElementView;

 public:

  Pyramid5ShapeView() {}
  explicit Pyramid5ShapeView(const GeomShapeView& rhs)
  : GeomShape3DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Pyramid5);
  }

  //! Nombre de noeuds de la forme (retourne \a 5)
  static Integer nbNode() { return 5; }
  //! Type de la forme (retourne \a GeomType::Pyramid5 )
  static GeomType geomType() { return GeomType::Pyramid5; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Hexaedron8ElementView svc, Integer i) { fillSubZonePyramid(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Pyramid5ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Pyramid5ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Pyramid5ShapeView PyramidShapeView;

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Pentaedron6.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pentaedron6ShapeView
: public GeomShape3DView
{
 public: 
  
  typedef PentaElementConstView ElementConstView;
  typedef PentaElementView ElementView;
  typedef PentaElement ElementType;
  typedef Hexaedron8Element SVCElement;
  typedef Hexaedron8ElementView SVCElementView;

 public:

  Pentaedron6ShapeView() {}
  explicit Pentaedron6ShapeView(const GeomShapeView& rhs)
  : GeomShape3DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Pentaedron6);
  }

  //! Nombre de noeuds de la forme (retourne \a 6)
  static Integer nbNode() { return 6; }
  //! Type de la forme (retourne \a GeomType::Pentaedron6 )
  static GeomType geomType() { return GeomType::Pentaedron6; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Hexaedron8ElementView svc, Integer i) { fillSubZonePenta(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Pentaedron6ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Pentaedron6ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Pentaedron6ShapeView PentaShapeView;

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Hexaedron8.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Hexaedron8ShapeView
: public GeomShape3DView
{
 public: 
  
  typedef HexaElementConstView ElementConstView;
  typedef HexaElementView ElementView;
  typedef HexaElement ElementType;
  typedef Hexaedron8Element SVCElement;
  typedef Hexaedron8ElementView SVCElementView;

 public:

  Hexaedron8ShapeView() {}
  explicit Hexaedron8ShapeView(const GeomShapeView& rhs)
  : GeomShape3DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Hexaedron8);
  }

  //! Nombre de noeuds de la forme (retourne \a 8)
  static Integer nbNode() { return 8; }
  //! Type de la forme (retourne \a GeomType::Hexaedron8 )
  static GeomType geomType() { return GeomType::Hexaedron8; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Hexaedron8ElementView svc, Integer i) { fillSubZoneHexa(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Hexaedron8ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Hexaedron8ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Hexaedron8ShapeView HexaShapeView;

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Heptaedron10.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Heptaedron10ShapeView
: public GeomShape3DView
{
 public: 
  
  typedef Wedge7ElementConstView ElementConstView;
  typedef Wedge7ElementView ElementView;
  typedef Wedge7Element ElementType;
  typedef Hexaedron8Element SVCElement;
  typedef Hexaedron8ElementView SVCElementView;

 public:

  Heptaedron10ShapeView() {}
  explicit Heptaedron10ShapeView(const GeomShapeView& rhs)
  : GeomShape3DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Heptaedron10);
  }

  //! Nombre de noeuds de la forme (retourne \a 10)
  static Integer nbNode() { return 10; }
  //! Type de la forme (retourne \a GeomType::Heptaedron10 )
  static GeomType geomType() { return GeomType::Heptaedron10; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Hexaedron8ElementView svc, Integer i) { fillSubZoneWedge7(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Heptaedron10ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Heptaedron10ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Heptaedron10ShapeView Wedge7ShapeView;

/*!
 * \ingroup ArcaneGeometric
 * \brief Vue spécifique sur les formes géométriques de type GeomType::Octaedron12.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Octaedron12ShapeView
: public GeomShape3DView
{
 public: 
  
  typedef Wedge8ElementConstView ElementConstView;
  typedef Wedge8ElementView ElementView;
  typedef Wedge8Element ElementType;
  typedef Hexaedron8Element SVCElement;
  typedef Hexaedron8ElementView SVCElementView;

 public:

  Octaedron12ShapeView() {}
  explicit Octaedron12ShapeView(const GeomShapeView& rhs)
  : GeomShape3DView(rhs)
  {
    ARCANE_GEOMETRIC_CHECKTYPE(rhs.geomType(),GeomType::Octaedron12);
  }

  //! Nombre de noeuds de la forme (retourne \a 12)
  static Integer nbNode() { return 12; }
  //! Type de la forme (retourne \a GeomType::Octaedron12 )
  static GeomType geomType() { return GeomType::Octaedron12; }
  //! Remplit \a svc avec les valeurs du \a i-ème sous-volume de controle.
  void fillSVC(Hexaedron8ElementView svc, Integer i) { fillSubZoneWedge8(svc,i); }

  //! Opérateur de conversion vers une vue constante sur l'élément géométrique
  operator Octaedron12ElementConstView () const { return ElementConstView(_nodeView()); }
  //! Vue constante sur l'élément géométrique
  Octaedron12ElementConstView elemView() const { return ElementConstView(_nodeView()); }
};
typedef Octaedron12ShapeView Wedge8ShapeView;


/*!
 * \name Conversion vers une vue sur une forme géométrique spécifique.
 *
 * Ces méthodes permettent de convertir l'instance en une vue spécifique à un type donné.
 * Le type géométrique (geomType()) de l'instance doit correspondre.
 */
//@{
inline Triangle3ShapeView GeomShapeView::
toTriangle3Shape() const
{
  return Triangle3ShapeView(*this);
}
inline Quad4ShapeView GeomShapeView::
toQuad4Shape() const
{
  return Quad4ShapeView(*this);
}
inline Pentagon5ShapeView GeomShapeView::
toPentagon5Shape() const
{
  return Pentagon5ShapeView(*this);
}
inline Hexagon6ShapeView GeomShapeView::
toHexagon6Shape() const
{
  return Hexagon6ShapeView(*this);
}
inline Tetraedron4ShapeView GeomShapeView::
toTetraedron4Shape() const
{
  return Tetraedron4ShapeView(*this);
}
inline Pyramid5ShapeView GeomShapeView::
toPyramid5Shape() const
{
  return Pyramid5ShapeView(*this);
}
inline Pentaedron6ShapeView GeomShapeView::
toPentaedron6Shape() const
{
  return Pentaedron6ShapeView(*this);
}
inline Hexaedron8ShapeView GeomShapeView::
toHexaedron8Shape() const
{
  return Hexaedron8ShapeView(*this);
}
inline Heptaedron10ShapeView GeomShapeView::
toHeptaedron10Shape() const
{
  return Heptaedron10ShapeView(*this);
}
inline Octaedron12ShapeView GeomShapeView::
toOctaedron12Shape() const
{
  return Octaedron12ShapeView(*this);
}
//@}

/*!
 * \name Conversion vers une vue sur un élément géométrique spécifique.
 *
 * Ces méthodes permettent de convertir l'instance en une vue spécifique à un type donné.
 * Le type géométrique (geomType()) de l'instance doit correspondre.
 */
//@{
inline Triangle3ElementConstView GeomShapeView::
toTriangle3Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Triangle3);
  return Triangle3ElementConstView(_nodeView());
}
inline Quad4ElementConstView GeomShapeView::
toQuad4Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Quad4);
  return Quad4ElementConstView(_nodeView());
}
inline Pentagon5ElementConstView GeomShapeView::
toPentagon5Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Pentagon5);
  return Pentagon5ElementConstView(_nodeView());
}
inline Hexagon6ElementConstView GeomShapeView::
toHexagon6Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Hexagon6);
  return Hexagon6ElementConstView(_nodeView());
}
inline Tetraedron4ElementConstView GeomShapeView::
toTetraedron4Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Tetraedron4);
  return Tetraedron4ElementConstView(_nodeView());
}
inline Pyramid5ElementConstView GeomShapeView::
toPyramid5Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Pyramid5);
  return Pyramid5ElementConstView(_nodeView());
}
inline Pentaedron6ElementConstView GeomShapeView::
toPentaedron6Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Pentaedron6);
  return Pentaedron6ElementConstView(_nodeView());
}
inline Hexaedron8ElementConstView GeomShapeView::
toHexaedron8Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Hexaedron8);
  return Hexaedron8ElementConstView(_nodeView());
}
inline Heptaedron10ElementConstView GeomShapeView::
toHeptaedron10Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Heptaedron10);
  return Heptaedron10ElementConstView(_nodeView());
}
inline Octaedron12ElementConstView GeomShapeView::
toOctaedron12Element() const
{
  ARCANE_GEOMETRIC_CHECKTYPE(geomType(),GeomType::Octaedron12);
  return Octaedron12ElementConstView(_nodeView());
}
//@}