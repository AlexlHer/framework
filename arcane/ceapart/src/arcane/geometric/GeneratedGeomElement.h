// WARNING: This file is generated by a tool. DO NOT EDIT.
/*
 * Génération des classes gérant les éléments géométriques (GeomElement).
 */

/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Triangle3.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Triangle3Element
: public GeomElementBase< 3 >
{
 public:
  typedef Triangle3ElementConstView ConstViewType;
  typedef Triangle3ElementView ViewType;
 public:
   using GeomElementBase< 3 >::init;

  Triangle3Element(){}
  Triangle3Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Triangle3Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Triangle3Element(const Real3& a0, const Real3& a1, const Real3& a2)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Triangle3
typedef Triangle3Element TriangleElement;


/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Quad4.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Quad4Element
: public GeomElementBase< 4 >
{
 public:
  typedef Quad4ElementConstView ConstViewType;
  typedef Quad4ElementView ViewType;
 public:
   using GeomElementBase< 4 >::init;

  Quad4Element(){}
  Quad4Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Quad4Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Quad4Element(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Quad4
typedef Quad4Element QuadElement;


/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Pentagon5.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pentagon5Element
: public GeomElementBase< 5 >
{
 public:
  typedef Pentagon5ElementConstView ConstViewType;
  typedef Pentagon5ElementView ViewType;
 public:
   using GeomElementBase< 5 >::init;

  Pentagon5Element(){}
  Pentagon5Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Pentagon5Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Pentagon5Element(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Pentagon5
typedef Pentagon5Element PentagonElement;


/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Hexagon6.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Hexagon6Element
: public GeomElementBase< 6 >
{
 public:
  typedef Hexagon6ElementConstView ConstViewType;
  typedef Hexagon6ElementView ViewType;
 public:
   using GeomElementBase< 6 >::init;

  Hexagon6Element(){}
  Hexagon6Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Hexagon6Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Hexagon6Element(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Hexagon6
typedef Hexagon6Element HexagonElement;


/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Tetraedron4.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Tetraedron4Element
: public GeomElementBase< 4 >
{
 public:
  typedef Tetraedron4ElementConstView ConstViewType;
  typedef Tetraedron4ElementView ViewType;
 public:
   using GeomElementBase< 4 >::init;

  Tetraedron4Element(){}
  Tetraedron4Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Tetraedron4Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Tetraedron4Element(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Tetraedron4
typedef Tetraedron4Element TetraElement;


/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Pyramid5.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pyramid5Element
: public GeomElementBase< 5 >
{
 public:
  typedef Pyramid5ElementConstView ConstViewType;
  typedef Pyramid5ElementView ViewType;
 public:
   using GeomElementBase< 5 >::init;

  Pyramid5Element(){}
  Pyramid5Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Pyramid5Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Pyramid5Element(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Pyramid5
typedef Pyramid5Element PyramidElement;


/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Pentaedron6.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Pentaedron6Element
: public GeomElementBase< 6 >
{
 public:
  typedef Pentaedron6ElementConstView ConstViewType;
  typedef Pentaedron6ElementView ViewType;
 public:
   using GeomElementBase< 6 >::init;

  Pentaedron6Element(){}
  Pentaedron6Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Pentaedron6Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Pentaedron6Element(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Pentaedron6
typedef Pentaedron6Element PentaElement;


/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Hexaedron8.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Hexaedron8Element
: public GeomElementBase< 8 >
{
 public:
  typedef Hexaedron8ElementConstView ConstViewType;
  typedef Hexaedron8ElementView ViewType;
 public:
   using GeomElementBase< 8 >::init;

  Hexaedron8Element(){}
  Hexaedron8Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Hexaedron8Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Hexaedron8Element(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5, const Real3& a6, const Real3& a7)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
      m_s[6] = a6;
      m_s[7] = a7;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5, const Real3& a6, const Real3& a7)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
      m_s[6] = a6;
      m_s[7] = a7;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Hexaedron8
typedef Hexaedron8Element HexaElement;


/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Heptaedron10.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Heptaedron10Element
: public GeomElementBase< 10 >
{
 public:
  typedef Heptaedron10ElementConstView ConstViewType;
  typedef Heptaedron10ElementView ViewType;
 public:
   using GeomElementBase< 10 >::init;

  Heptaedron10Element(){}
  Heptaedron10Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Heptaedron10Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Heptaedron10Element(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5, const Real3& a6, const Real3& a7, const Real3& a8, const Real3& a9)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
      m_s[6] = a6;
      m_s[7] = a7;
      m_s[8] = a8;
      m_s[9] = a9;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5, const Real3& a6, const Real3& a7, const Real3& a8, const Real3& a9)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
      m_s[6] = a6;
      m_s[7] = a7;
      m_s[8] = a8;
      m_s[9] = a9;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Heptaedron10
typedef Heptaedron10Element Wedge7Element;


/*!
 * \ingroup ArcaneGeometric
 * \brief Eléments géométriques de type GeomType::Octaedron12.
 */
class ARCANE_CEA_GEOMETRIC_EXPORT Octaedron12Element
: public GeomElementBase< 12 >
{
 public:
  typedef Octaedron12ElementConstView ConstViewType;
  typedef Octaedron12ElementView ViewType;
 public:
   using GeomElementBase< 12 >::init;

  Octaedron12Element(){}
  Octaedron12Element(const VariableNodeReal3& coords,ItemWithNodes item) : GeomElementBase(coords,item){}
  Octaedron12Element(Real3ConstArrayView coords) : GeomElementBase(coords){}
  Octaedron12Element(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5, const Real3& a6, const Real3& a7, const Real3& a8, const Real3& a9, const Real3& a10, const Real3& a11)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
      m_s[6] = a6;
      m_s[7] = a7;
      m_s[8] = a8;
      m_s[9] = a9;
      m_s[10] = a10;
      m_s[11] = a11;
     }

  //! Initialise l'instance avec les coordonnées passées en argument
  void init(const Real3& a0, const Real3& a1, const Real3& a2, const Real3& a3, const Real3& a4, const Real3& a5, const Real3& a6, const Real3& a7, const Real3& a8, const Real3& a9, const Real3& a10, const Real3& a11)
  {
      m_s[0] = a0;
      m_s[1] = a1;
      m_s[2] = a2;
      m_s[3] = a3;
      m_s[4] = a4;
      m_s[5] = a5;
      m_s[6] = a6;
      m_s[7] = a7;
      m_s[8] = a8;
      m_s[9] = a9;
      m_s[10] = a10;
      m_s[11] = a11;
     }
  //! Opérateur de conversion vers une vue constante
  operator ConstViewType() const { return ConstViewType(m_s); }
  //! Opérateur de conversion vers une vue modifiable
  operator ViewType() { return ViewType(m_s); }
  //! Vue constante sur l'élément
  ConstViewType constView() const { return ConstViewType(m_s); }
  //! Vue modifiable sur l'élément
  ViewType view() { return ViewType(m_s); }
};

//! Elément géométrique de type GeomType::Octaedron12
typedef Octaedron12Element Wedge8Element;

