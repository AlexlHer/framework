version: 2.1

executors:
  # 4 CPU / 8Go RAM / 20c/min
  large-executor-image:
    docker:
      - image: ghcr.io/arcaneframework/ubuntu-2204:gcc-12_clang-14_minimal
    resource_class: large
    working_directory: ~/workspace

  # V100 / 8 CPU / 30Go RAM / 1000c/min
  large-executor-gpu:
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: gpu.nvidia.large
    working_directory: ~/workspace

  # 2 CPU / 8Go RAM / 10c/min
  medium-executor-arm:
    machine:
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
    working_directory: ~/workspace

  # 4 CPU / 15Go RAM / 20c/min
  large-executor-empty:
    machine:
      image: ubuntu-2204:2022.04.1
    resource_class: large
    working_directory: ~/workspace

# Les variables d'environnement.
parameters:
  SOURCE_DIR:
    type: string
    default: "~/workspace"

  BUILD_DIR:
    type: string
    default: "~/workspace/build"

  INSTALL_DIR:
    type: string
    default: "~/workspace/install"

  CT_RESULT_DIR:
    type: string
    default: "~/workspace/test"
  
  CT_OPTS:
    type: string
    default: "--timeout 300 --output-on-failure"


  CM_BUILD_TYPE:
    type: string
    default: "Release"

  CM_CCACHE_OPTS:
    type: string
    default: "-DCMAKE_CXX_COMPILER_LAUNCHER=ccache"

  CM_COMPILER:
    type: string
    default: "-DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++"

  CM_COMPILER_NVCC:
    type: string
    default: "-DARCANE_ACCELERATOR_MODE=CUDANVCC -DCMAKE_CUDA_COMPILER=`which nvcc`"


  CC_KEY_PREFIX:
    type: string
    default: "circleci"

  CC_KEY_PREFIX_ARM:
    type: string
    default: "circleci_arm"

  CC_KEY_PREFIX_CUDA:
    type: string
    default: "circleci_cuda"

  CC_DIR:
    type: string
    default: "~/workspace/ccache"


# Les jobs.
jobs:
  build-and-test:
    executor: large-executor-image
    steps:
      - checkout
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init

      - restore_cache:
          keys: 
            - << pipeline.parameters.CC_KEY_PREFIX >>-arcane-<< pipeline.parameters.CM_BUILD_TYPE >>-

      - run:
          name: Create ccache directory and ccache environment variables
          command: |
            echo 'export CCACHE_COMPRESS=true' >> $BASH_ENV
            echo 'export CCACHE_COMPRESSLEVEL=6' >> $BASH_ENV
            echo 'export CCACHE_DIR=<< pipeline.parameters.CC_DIR >>' >> $BASH_ENV
            echo 'export CCACHE_MAXSIZE=500M' >> $BASH_ENV
            mkdir -p << pipeline.parameters.CC_DIR >>

      - run:
          name: Configure 'framework'
          command: |
            cmake \
            -S << pipeline.parameters.SOURCE_DIR >> \
            -B << pipeline.parameters.BUILD_DIR >> \
            -GNinja \
            -DCMAKE_CXX_FLAGS_RELEASE="-O2" \
            -DCMAKE_VERBOSE_MAKEFILE=TRUE \
            -DCMAKE_BUILD_TYPE=<< pipeline.parameters.CM_BUILD_TYPE >> \
            -DBUILD_SHARED_LIBS=TRUE \
            -DARCANE_DEFAULT_PARTITIONER=Metis \
            -DARCCON_REGISTER_PACKAGE_VERSION=2 \
            << pipeline.parameters.CM_CCACHE_OPTS >>

      - run:
          name: Build 'framework'
          command: cmake --build << pipeline.parameters.BUILD_DIR >>

      - run:
          name: Get 'ccache' status
          command: |
            ccache -s

      - save_cache:
          key: << pipeline.parameters.CC_KEY_PREFIX >>-arcane-<< pipeline.parameters.CM_BUILD_TYPE >>-{{ .BuildNum }}
          paths:
            - ~/workspace/ccache

      - run:
          name: Force execution of MPI in root session
          command: |
            echo 'export OMPI_ALLOW_RUN_AS_ROOT=1' >> $BASH_ENV
            echo 'export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1' >> $BASH_ENV

      # On ne lance pas les tests qui utilisent 'mpithread' car ils ont besoin de 12 coeurs
      # sur les machines à 4 coeurs cela pose problème.
      - run:
          name: Test 'framework'
          command: |
            mkdir -p << pipeline.parameters.CT_RESULT_DIR >>
            ctest --test-dir << pipeline.parameters.BUILD_DIR >> --output-junit << pipeline.parameters.CT_RESULT_DIR >>/results.xml << pipeline.parameters.CT_OPTS >> -E '^.*([3-9][_]*mpithread|[1-9][0-9]+[_]*mpithread|[5-9]proc|[1-9][0-9]+proc).*$'

      - store_test_results:
          path: << pipeline.parameters.CT_RESULT_DIR >>

      - store_artifacts:
          path: << pipeline.parameters.CT_RESULT_DIR >>


  arm-build-and-test:
    executor: medium-executor-arm
    steps:
      - checkout

      # On récupère les sous-modules.
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init
            
      - run:
          name: Install all packages to build Arcane
          command: |
            sudo apt-get update -y
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
            sudo apt-get update -y
            sudo apt-get install -y --no-install-recommends \
            gcc-11 g++-11 libc6-dev make dpkg-dev cmake apt-utils iputils-ping python3 \
            git gfortran libglib2.0-dev libxml2-dev libhdf5-openmpi-dev libparmetis-dev \
            wget libgtest-dev libtbb-dev rsync swig4.0 libhypre-dev petsc-dev libbz2-dev \
            ninja-build ccache valgrind apt-transport-https
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
            sudo update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-11 100
            sudo update-alternatives --set g++ /usr/bin/g++-11
            sudo update-alternatives --set gcc /usr/bin/gcc-11
            sudo update-alternatives --set cpp-bin /usr/bin/cpp-11

      - run:
          name: Install Dotnet 6
          command: |
            wget https://dot.net/v1/dotnet-install.sh
            sudo chmod u+x dotnet-install.sh
            ./dotnet-install.sh
            echo 'export PATH=/home/circleci/.dotnet:${PATH}' >> $BASH_ENV
            PATH=/home/circleci/.dotnet:${PATH}

      - run:
          name: Install CMake 3.21
          command: |
            MY_CMAKE_INSTALL_PATH=/usr/local/cmake-3.21.3
            wget https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-linux-aarch64.tar.gz
            sudo mkdir ${MY_CMAKE_INSTALL_PATH}
            sudo tar -C ${MY_CMAKE_INSTALL_PATH} -x --strip-components 1 -f cmake-3.21.3-linux-aarch64.tar.gz
            echo 'export PATH=/usr/local/cmake-3.21.3/bin:${PATH}' >> $BASH_ENV
            PATH=${MY_CMAKE_INSTALL_PATH}/bin:${PATH}
            cmake --version
      

      - restore_cache:
          keys: 
            - << pipeline.parameters.CC_KEY_PREFIX_ARM >>-arcane-<< pipeline.parameters.CM_BUILD_TYPE >>-

      - run:
          name: Create ccache directory and ccache environment variables
          command: |
            echo 'export CCACHE_COMPRESS=true' >> $BASH_ENV
            echo 'export CCACHE_COMPRESSLEVEL=6' >> $BASH_ENV
            echo 'export CCACHE_DIR=<< pipeline.parameters.CC_DIR >>' >> $BASH_ENV
            echo 'export CCACHE_MAXSIZE=500M' >> $BASH_ENV
            mkdir -p << pipeline.parameters.CC_DIR >>


      - run:
          name: Configure
          command: |
            cmake \
            -S << pipeline.parameters.SOURCE_DIR >> \
            -B << pipeline.parameters.BUILD_DIR >> \
            -GNinja \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_BUILD_TYPE=<< pipeline.parameters.CM_BUILD_TYPE >> \
            -DCMAKE_INSTALL_PREFIX=<< pipeline.parameters.INSTALL_DIR >> \
            -DARCANE_DEFAULT_PARTITIONER=Metis \
            -DARCANE_WANT_ARCCON_EXPORT_TARGET=OFF \
            << pipeline.parameters.CM_CCACHE_OPTS >> \
            << pipeline.parameters.CM_COMPILER >>

      - run:
          name: Build
          command: cmake --build << pipeline.parameters.BUILD_DIR >>

      - run:
          name: Install
          command: cmake --install << pipeline.parameters.BUILD_DIR >>

      - save_cache:
          key: << pipeline.parameters.CC_KEY_PREFIX_ARM >>-arcane-<< pipeline.parameters.CM_BUILD_TYPE >>-{{ .BuildNum }}
          paths:
            - ~/workspace/ccache

      - run:
          name: Force execution of MPI in root session
          command: |
            echo 'export OMPI_ALLOW_RUN_AS_ROOT=1' >> $BASH_ENV
            echo 'export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1' >> $BASH_ENV

      - run:
          name: Test
          # Avril 2022: Supprime le test 'utils' car sur circle-ci il plante à cause du fait qu'on ne peut
          # pas positionner les exceptions flottantes.
          command: |
            mkdir -p << pipeline.parameters.CT_RESULT_DIR >>
            ctest --test-dir << pipeline.parameters.BUILD_DIR >> --output-junit << pipeline.parameters.CT_RESULT_DIR >>/results.xml << pipeline.parameters.CT_OPTS >> -E '^utils1$|^.*([1-9][_]*mpithread|[1-9][0-9]+[_]*mpithread|[3-9]proc|[1-9][0-9]+proc).*$'

      - store_test_results:
          path: << pipeline.parameters.CT_RESULT_DIR >>

      - store_artifacts:
          path: << pipeline.parameters.CT_RESULT_DIR >>

  cuda-build-and-test:
    executor: large-executor-gpu
    steps:
      - checkout

      # On récupère les sous-modules.
      - run:
          name: "Pull Submodules"
          command: |
            git submodule update --init
            
      - run:
          name: Install all packages to build Arcane
          command: |
            sudo apt-get update -y
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
            sudo apt-get update -y
            sudo apt-get install -y --no-install-recommends \
            gcc-11 g++-11 libc6-dev make dpkg-dev cmake apt-utils iputils-ping python3 \
            git gfortran libglib2.0-dev libxml2-dev libhdf5-openmpi-dev libparmetis-dev \
            wget libgtest-dev libtbb-dev rsync swig4.0 libhypre-dev petsc-dev libbz2-dev \
            ninja-build ccache valgrind apt-transport-https
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 100
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100
            sudo update-alternatives --install /usr/bin/cpp cpp-bin /usr/bin/cpp-11 100
            sudo update-alternatives --set g++ /usr/bin/g++-11
            sudo update-alternatives --set gcc /usr/bin/gcc-11
            sudo update-alternatives --set cpp-bin /usr/bin/cpp-11

      - run:
          name: Install Dotnet 6
          command: |
            wget https://dot.net/v1/dotnet-install.sh
            sudo chmod u+x dotnet-install.sh
            ./dotnet-install.sh
            echo 'export PATH=/home/circleci/.dotnet:${PATH}' >> $BASH_ENV
            PATH=/home/circleci/.dotnet:${PATH}

      - run:
          name: Install CMake 3.21
          command: |
            MY_CMAKE_INSTALL_PATH=/usr/local/cmake-3.21.3
            wget https://github.com/Kitware/CMake/releases/download/v3.21.3/cmake-3.21.3-Linux-x86_64.tar.gz
            sudo mkdir ${MY_CMAKE_INSTALL_PATH}
            sudo tar -C ${MY_CMAKE_INSTALL_PATH} -x --strip-components 1 -f cmake-3.21.3-Linux-x86_64.tar.gz
            echo 'export PATH=/usr/local/cmake-3.21.3/bin:${PATH}' >> $BASH_ENV
            PATH=${MY_CMAKE_INSTALL_PATH}/bin:${PATH}
            cmake --version
      

      - restore_cache:
          keys: 
            - << pipeline.parameters.CC_KEY_PREFIX_CUDA >>-arcane-<< pipeline.parameters.CM_BUILD_TYPE >>-

      - run:
          name: Create ccache directory and ccache environment variables
          command: |
            echo 'export CCACHE_COMPRESS=true' >> $BASH_ENV
            echo 'export CCACHE_COMPRESSLEVEL=6' >> $BASH_ENV
            echo 'export CCACHE_DIR=<< pipeline.parameters.CC_DIR >>' >> $BASH_ENV
            echo 'export CCACHE_MAXSIZE=500M' >> $BASH_ENV
            mkdir -p << pipeline.parameters.CC_DIR >>


      - run:
          name: Configure
          command: |
            cmake \
            -S << pipeline.parameters.SOURCE_DIR >> \
            -B << pipeline.parameters.BUILD_DIR >> \
            -GNinja \
            -DBUILD_SHARED_LIBS=ON \
            -DCMAKE_BUILD_TYPE=<< pipeline.parameters.CM_BUILD_TYPE >> \
            -DCMAKE_INSTALL_PREFIX=<< pipeline.parameters.INSTALL_DIR >> \
            -DARCANE_DEFAULT_PARTITIONER=Metis \
            -DARCANE_WANT_ARCCON_EXPORT_TARGET=OFF \
            << pipeline.parameters.CM_CCACHE_OPTS >> \
            << pipeline.parameters.CM_COMPILER >>

      - run:
          name: Build
          command: cmake --build << pipeline.parameters.BUILD_DIR >>

      - run:
          name: Install
          command: cmake --install << pipeline.parameters.BUILD_DIR >>

      - save_cache:
          key: << pipeline.parameters.CC_KEY_PREFIX_CUDA >>-arcane-<< pipeline.parameters.CM_BUILD_TYPE >>-{{ .BuildNum }}
          paths:
            - ~/workspace/ccache

      - run:
          name: Force execution of MPI in root session
          command: |
            echo 'export OMPI_ALLOW_RUN_AS_ROOT=1' >> $BASH_ENV
            echo 'export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1' >> $BASH_ENV

      - run:
          name: Test
          command: |
            mkdir -p << pipeline.parameters.CT_RESULT_DIR >>
            ctest --test-dir << pipeline.parameters.BUILD_DIR >> --output-junit << pipeline.parameters.CT_RESULT_DIR >>/results.xml << pipeline.parameters.CT_OPTS >> -E mpithread

      - store_test_results:
          path: << pipeline.parameters.CT_RESULT_DIR >>

      - store_artifacts:
          path: << pipeline.parameters.CT_RESULT_DIR >>


# Invoke jobs via workflows
workflows:
  build-and-test:
    jobs:
      - build-and-test

  build_and_test_arm:
    triggers: #use the triggers key to indicate a scheduled build
      - schedule:
          cron: "23 1 * * *" # Tous les jours à 01:23 (du matin).
          filters:
            branches:
              only:
                - main
    jobs:
      - arm-build-and-test

  # build_and_test_cuda:
  #   triggers: #use the triggers key to indicate a scheduled build
  #     - schedule:
  #         cron: "23 1 * * *" # Tous les jours à 01:23 (du matin).
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - cuda-build-and-test